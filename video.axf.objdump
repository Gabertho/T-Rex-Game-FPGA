
C:/intelFPGA_lite/18.1/University_Program/Projetos/Projeto1/video.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
       0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      20:	40 00 00 00 2c 20 00 00 30 20 00 00 34 20 00 00     @..., ..0 ..4 ..
      30:	38 20 00 00 28 20 00 00 3c 20 00 00 40 20 00 00     8 ..( ..< ..@ ..

00000040 <__cs3_reset>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_region_zero_size_ram+0x90>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_region_zero_size_ram+0x8c>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_region_zero_size_ram+0x94>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_region_zero_size_ram+0x5c>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_region_zero_size_ram+0x5c>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_region_zero_size_ram+0x44>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_region_zero_size_ram+0x7c>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_region_zero_size_ram+0x6c>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_region_zero_size_ram+0x1c>
      d4:	eb0007ba 	bl	1fc4 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	00002818 	.word	0x00002818

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	00002c70 	.word	0x00002c70

00000124 <__cs3_heap_start_ptr>:
     124:	00002cc0 	.word	0x00002cc0

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	00002c78 	.word	0x00002c78
     170:	00002c7b 	.word	0x00002c7b
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	00002c78 	.word	0x00002c78
     1bc:	00002c78 	.word	0x00002c78
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	00002c78 	.word	0x00002c78
     200:	00000000 	.word	0x00000000
     204:	000020cc 	.word	0x000020cc

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	000020cc 	.word	0x000020cc
     250:	00002c7c 	.word	0x00002c7c
     254:	00002818 	.word	0x00002818
     258:	00000000 	.word	0x00000000

0000025c <clear_text>:
}

void clear_text(void) {
    volatile char * character_buffer = (char *)FPGA_CHAR_BASE;
    int y, x;
    for (y = 0; y < 60; y++) {
     25c:	e3a00000 	mov	r0, #0
        for (x = 0; x < 80; x++) {
            int offset = (y << 7) + x;
     260:	e1a0c000 	mov	r12, r0
            character_buffer[offset] = ' ';
     264:	e3a01020 	mov	r1, #32
     268:	ea000006 	b	288 <clear_text+0x2c>
     26c:	e7c21003 	strb	r1, [r2, r3]

void clear_text(void) {
    volatile char * character_buffer = (char *)FPGA_CHAR_BASE;
    int y, x;
    for (y = 0; y < 60; y++) {
        for (x = 0; x < 80; x++) {
     270:	e2833001 	add	r3, r3, #1
     274:	e3530050 	cmp	r3, #80	; 0x50
     278:	1afffffb 	bne	26c <clear_text+0x10>
}

void clear_text(void) {
    volatile char * character_buffer = (char *)FPGA_CHAR_BASE;
    int y, x;
    for (y = 0; y < 60; y++) {
     27c:	e2800001 	add	r0, r0, #1
     280:	e350003c 	cmp	r0, #60	; 0x3c
     284:	012fff1e 	bxeq	lr
        for (x = 0; x < 80; x++) {
            int offset = (y << 7) + x;
     288:	e1a02380 	lsl	r2, r0, #7
     28c:	e1a0300c 	mov	r3, r12
    }
    
    return 0;
}

void clear_text(void) {
     290:	e28224c9 	add	r2, r2, #-922746880	; 0xc9000000
     294:	eafffff4 	b	26c <clear_text+0x10>

00000298 <check_collision>:
}



int check_collision(int dino_x, int dino_y, int obs_x, int obs_y) {
    if (dino_x < obs_x + OBSTACLE_WIDTH + 3 &&
     298:	e282c00b 	add	r12, r2, #11
     29c:	e15c0000 	cmp	r12, r0
     2a0:	da00000a 	ble	2d0 <check_collision+0x38>
        dino_x + DINO_WIDTH > obs_x &&
     2a4:	e2800010 	add	r0, r0, #16
}



int check_collision(int dino_x, int dino_y, int obs_x, int obs_y) {
    if (dino_x < obs_x + OBSTACLE_WIDTH + 3 &&
     2a8:	e1520000 	cmp	r2, r0
     2ac:	aa000009 	bge	2d8 <check_collision+0x40>
        dino_x + DINO_WIDTH > obs_x &&
        dino_y < obs_y + OBSTACLE_HEIGHT &&
     2b0:	e2832014 	add	r2, r3, #20



int check_collision(int dino_x, int dino_y, int obs_x, int obs_y) {
    if (dino_x < obs_x + OBSTACLE_WIDTH + 3 &&
        dino_x + DINO_WIDTH > obs_x &&
     2b4:	e1520001 	cmp	r2, r1
     2b8:	da000008 	ble	2e0 <check_collision+0x48>
        dino_y < obs_y + OBSTACLE_HEIGHT &&
        dino_y + DINO_HEIGHT > obs_y) {
     2bc:	e2810014 	add	r0, r1, #20


int check_collision(int dino_x, int dino_y, int obs_x, int obs_y) {
    if (dino_x < obs_x + OBSTACLE_WIDTH + 3 &&
        dino_x + DINO_WIDTH > obs_x &&
        dino_y < obs_y + OBSTACLE_HEIGHT &&
     2c0:	e1530000 	cmp	r3, r0
     2c4:	a3a00000 	movge	r0, #0
     2c8:	b3a00001 	movlt	r0, #1
     2cc:	e12fff1e 	bx	lr
        dino_y + DINO_HEIGHT > obs_y) {
        return 1;
    }
    return 0;
     2d0:	e3a00000 	mov	r0, #0
     2d4:	e12fff1e 	bx	lr
     2d8:	e3a00000 	mov	r0, #0
     2dc:	e12fff1e 	bx	lr
     2e0:	e3a00000 	mov	r0, #0
}
     2e4:	e12fff1e 	bx	lr

000002e8 <delay>:

void delay(int count) {
     2e8:	e24dd008 	sub	sp, sp, #8
    volatile int i;
    for (i = 0; i < count; i++);
     2ec:	e3a03000 	mov	r3, #0
     2f0:	e58d3004 	str	r3, [sp, #4]
     2f4:	e59d3004 	ldr	r3, [sp, #4]
     2f8:	e1500003 	cmp	r0, r3
     2fc:	da000005 	ble	318 <delay+0x30>
     300:	e59d3004 	ldr	r3, [sp, #4]
     304:	e2833001 	add	r3, r3, #1
     308:	e58d3004 	str	r3, [sp, #4]
     30c:	e59d3004 	ldr	r3, [sp, #4]
     310:	e1530000 	cmp	r3, r0
     314:	bafffff9 	blt	300 <delay+0x18>
}
     318:	e28dd008 	add	sp, sp, #8
     31c:	e12fff1e 	bx	lr

00000320 <random_range>:

int random_range(int min, int max) {
     320:	e92d4038 	push	{r3, r4, r5, lr}
     324:	e1a04000 	mov	r4, r0
     328:	e1a05001 	mov	r5, r1
    return min + (rand() % (max - min + 1));
     32c:	eb000657 	bl	1c90 <rand>
     330:	e0641005 	rsb	r1, r4, r5
     334:	e2811001 	add	r1, r1, #1
     338:	eb00055f 	bl	18bc <__aeabi_idivmod>
}
     33c:	e0810004 	add	r0, r1, r4
     340:	e8bd8038 	pop	{r3, r4, r5, pc}

00000344 <video_text>:

void video_text(int x, int y, char * text_ptr) {
    int offset;
    volatile char * character_buffer = (char *)FPGA_CHAR_BASE;

    offset = (y << 7) + x;
     344:	e0801381 	add	r1, r0, r1, lsl #7
    while (*(text_ptr)) {
     348:	e5d23000 	ldrb	r3, [r2]
     34c:	e3530000 	cmp	r3, #0
     350:	012fff1e 	bxeq	lr
     354:	e1a0c002 	mov	r12, r2

int random_range(int min, int max) {
    return min + (rand() % (max - min + 1));
}

void video_text(int x, int y, char * text_ptr) {
     358:	e0622001 	rsb	r2, r2, r1
     35c:	e28224c9 	add	r2, r2, #-922746880	; 0xc9000000
    int offset;
    volatile char * character_buffer = (char *)FPGA_CHAR_BASE;

    offset = (y << 7) + x;
    while (*(text_ptr)) {
        *(character_buffer + offset) = *(text_ptr);
     360:	e7c2300c 	strb	r3, [r2, r12]
void video_text(int x, int y, char * text_ptr) {
    int offset;
    volatile char * character_buffer = (char *)FPGA_CHAR_BASE;

    offset = (y << 7) + x;
    while (*(text_ptr)) {
     364:	e5fc3001 	ldrb	r3, [r12, #1]!
     368:	e3530000 	cmp	r3, #0
     36c:	1afffffb 	bne	360 <video_text+0x1c>
     370:	e12fff1e 	bx	lr

00000374 <draw_score>:
        video_box(x + 3, y,     x + 3, y + 2, bone_color); // lado direito
    }
}


void draw_score(int score) {
     374:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     378:	e24dd01c 	sub	sp, sp, #28
     37c:	e1a02000 	mov	r2, r0
    char score_display[20] = "Score: ";
     380:	e30230d0 	movw	r3, #8400	; 0x20d0
     384:	e3403000 	movt	r3, #0
     388:	e28dc004 	add	r12, sp, #4
     38c:	e8930003 	ldm	r3, {r0, r1}
     390:	e88c0003 	stm	r12, {r0, r1}
     394:	e3a03000 	mov	r3, #0
     398:	e58d300c 	str	r3, [sp, #12]
     39c:	e58d3010 	str	r3, [sp, #16]
     3a0:	e58d3014 	str	r3, [sp, #20]
    int temp_score = score;
    int i = 7;
    
    if (temp_score == 0) {
     3a4:	e1520003 	cmp	r2, r3
     3a8:	0a000005 	beq	3c4 <draw_score+0x50>
        score_display[7] = '0';
        score_display[8] = '\0';
    } else {
        while (temp_score > 0) {
     3ac:	c1a00002 	movgt	r0, r2
     3b0:	c3a03007 	movgt	r3, #7
            score_display[i] = (temp_score % 10) + '0';
     3b4:	c306c667 	movwgt	r12, #26215	; 0x6667
     3b8:	c346c666 	movtgt	r12, #26214	; 0x6666
    
    if (temp_score == 0) {
        score_display[7] = '0';
        score_display[8] = '\0';
    } else {
        while (temp_score > 0) {
     3bc:	ca000005 	bgt	3d8 <draw_score+0x64>
     3c0:	ea000026 	b	460 <draw_score+0xec>
    char score_display[20] = "Score: ";
    int temp_score = score;
    int i = 7;
    
    if (temp_score == 0) {
        score_display[7] = '0';
     3c4:	e3a03030 	mov	r3, #48	; 0x30
     3c8:	e5cd300b 	strb	r3, [sp, #11]
        score_display[8] = '\0';
     3cc:	e3a03000 	mov	r3, #0
     3d0:	e5cd300c 	strb	r3, [sp, #12]
     3d4:	ea00001c 	b	44c <draw_score+0xd8>
    } else {
        while (temp_score > 0) {
            score_display[i] = (temp_score % 10) + '0';
     3d8:	e0c1209c 	smull	r2, r1, r12, r0
     3dc:	e1a02fc0 	asr	r2, r0, #31
     3e0:	e0622141 	rsb	r2, r2, r1, asr #2
     3e4:	e0821102 	add	r1, r2, r2, lsl #2
     3e8:	e0400081 	sub	r0, r0, r1, lsl #1
     3ec:	e2800030 	add	r0, r0, #48	; 0x30
     3f0:	e28d1004 	add	r1, sp, #4
     3f4:	e7c30001 	strb	r0, [r3, r1]
            temp_score /= 10;
     3f8:	e1a00002 	mov	r0, r2
            i++;
     3fc:	e2833001 	add	r3, r3, #1
    
    if (temp_score == 0) {
        score_display[7] = '0';
        score_display[8] = '\0';
    } else {
        while (temp_score > 0) {
     400:	e3520000 	cmp	r2, #0
     404:	cafffff3 	bgt	3d8 <draw_score+0x64>
            score_display[i] = (temp_score % 10) + '0';
            temp_score /= 10;
            i++;
        }
        score_display[i] = '\0';
     408:	e28d1018 	add	r1, sp, #24
     40c:	e0812003 	add	r2, r1, r3
     410:	e3a01000 	mov	r1, #0
     414:	e5421014 	strb	r1, [r2, #-20]	; 0xffffffec
        int start = 7, end = i - 1;
     418:	e2433001 	sub	r3, r3, #1
        while (start < end) {
     41c:	e3530007 	cmp	r3, #7
     420:	da000009 	ble	44c <draw_score+0xd8>
            score_display[i] = (temp_score % 10) + '0';
            temp_score /= 10;
            i++;
        }
        score_display[i] = '\0';
        int start = 7, end = i - 1;
     424:	e3a02007 	mov	r2, #7
        while (start < end) {
            char temp = score_display[start];
     428:	e28d1004 	add	r1, sp, #4
     42c:	e7d20001 	ldrb	r0, [r2, r1]
            score_display[start] = score_display[end];
     430:	e7d3c001 	ldrb	r12, [r3, r1]
     434:	e7c2c001 	strb	r12, [r2, r1]
            score_display[end] = temp;
     438:	e7c30001 	strb	r0, [r3, r1]
            start++;
     43c:	e2822001 	add	r2, r2, #1
            end--;
     440:	e2433001 	sub	r3, r3, #1
            temp_score /= 10;
            i++;
        }
        score_display[i] = '\0';
        int start = 7, end = i - 1;
        while (start < end) {
     444:	e1520003 	cmp	r2, r3
     448:	bafffff6 	blt	428 <draw_score+0xb4>
            score_display[end] = temp;
            start++;
            end--;
        }
    }
    video_text(1, 1, score_display);
     44c:	e3a00001 	mov	r0, #1
     450:	e1a01000 	mov	r1, r0
     454:	e28d2004 	add	r2, sp, #4
     458:	ebffffb9 	bl	344 <video_text>
     45c:	ea000002 	b	46c <draw_score+0xf8>
        while (temp_score > 0) {
            score_display[i] = (temp_score % 10) + '0';
            temp_score /= 10;
            i++;
        }
        score_display[i] = '\0';
     460:	e3a03000 	mov	r3, #0
     464:	e5cd300b 	strb	r3, [sp, #11]
     468:	eafffff7 	b	44c <draw_score+0xd8>
            start++;
            end--;
        }
    }
    video_text(1, 1, score_display);
}
     46c:	e28dd01c 	add	sp, sp, #28
     470:	e8bd8000 	ldmfd	sp!, {pc}

00000474 <video_box>:
        ++text_ptr;
        ++offset;
    }
}

void video_box(int x1, int y1, int x2, int y2, short pixel_color) {
     474:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
     478:	e1a08001 	mov	r8, r1
     47c:	e1a04002 	mov	r4, r2
     480:	e1a09003 	mov	r9, r3
     484:	e1dd62f8 	ldrsh	r6, [sp, #40]	; 0x28
    int pixel_buf_ptr = *(int *)PIXEL_BUF_CTRL_BASE;
     488:	e3033fff 	movw	r3, #16383	; 0x3fff
     48c:	e34f3f20 	movt	r3, #65312	; 0xff20
     490:	e5135fdf 	ldr	r5, [r3, #-4063]	; 0xfffff021
    int pixel_ptr, row, col;
    int x_factor = 0x1 << (res_offset + col_offset);
     494:	e302cc94 	movw	r12, #11412	; 0x2c94
     498:	e340c000 	movt	r12, #0
     49c:	e59c3000 	ldr	r3, [r12]
     4a0:	e59cb004 	ldr	r11, [r12, #4]
     4a4:	e083b00b 	add	r11, r3, r11
     4a8:	e3a0a001 	mov	r10, #1
     4ac:	e1a0bb1a 	lsl	r11, r10, r11
    int y_factor = 0x1 << (res_offset);
     4b0:	e1a0a31a 	lsl	r10, r10, r3
    x1 = x1 / x_factor;
     4b4:	e1a0100b 	mov	r1, r11
     4b8:	eb0004b5 	bl	1794 <__aeabi_idiv>
     4bc:	e1a07000 	mov	r7, r0
    x2 = x2 / x_factor;
     4c0:	e1a00004 	mov	r0, r4
     4c4:	e1a0100b 	mov	r1, r11
     4c8:	eb0004b1 	bl	1794 <__aeabi_idiv>
     4cc:	e1a04000 	mov	r4, r0
    y1 = y1 / y_factor;
     4d0:	e1a00008 	mov	r0, r8
     4d4:	e1a0100a 	mov	r1, r10
     4d8:	eb0004ad 	bl	1794 <__aeabi_idiv>
     4dc:	e1a08000 	mov	r8, r0
    y2 = y2 / y_factor;
     4e0:	e1a00009 	mov	r0, r9
     4e4:	e1a0100a 	mov	r1, r10
     4e8:	eb0004a9 	bl	1794 <__aeabi_idiv>

    for (row = y1; row <= y2; row++)
     4ec:	e1580000 	cmp	r8, r0
     4f0:	c8bd8ff8 	popgt	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
     4f4:	ea00000d 	b	530 <video_box+0xbc>
        for (col = x1; col <= x2; ++col) {
            pixel_ptr = pixel_buf_ptr + (row << (10 - res_offset - col_offset)) + (col << 1);
     4f8:	e592c000 	ldr	r12, [r2]
     4fc:	e26cc00a 	rsb	r12, r12, #10
     500:	e5921004 	ldr	r1, [r2, #4]
     504:	e061c00c 	rsb	r12, r1, r12
     508:	e1a01083 	lsl	r1, r3, #1
            *(short *)pixel_ptr = pixel_color;
     50c:	e085cc18 	add	r12, r5, r8, lsl r12
     510:	e18c60b1 	strh	r6, [r12, r1]
    x2 = x2 / x_factor;
    y1 = y1 / y_factor;
    y2 = y2 / y_factor;

    for (row = y1; row <= y2; row++)
        for (col = x1; col <= x2; ++col) {
     514:	e2833001 	add	r3, r3, #1
     518:	e1540003 	cmp	r4, r3
     51c:	aafffff5 	bge	4f8 <video_box+0x84>
    x1 = x1 / x_factor;
    x2 = x2 / x_factor;
    y1 = y1 / y_factor;
    y2 = y2 / y_factor;

    for (row = y1; row <= y2; row++)
     520:	e2888001 	add	r8, r8, #1
     524:	e1500008 	cmp	r0, r8
     528:	aa000002 	bge	538 <video_box+0xc4>
     52c:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
        for (col = x1; col <= x2; ++col) {
            pixel_ptr = pixel_buf_ptr + (row << (10 - res_offset - col_offset)) + (col << 1);
     530:	e3022c94 	movw	r2, #11412	; 0x2c94
     534:	e3402000 	movt	r2, #0
    x2 = x2 / x_factor;
    y1 = y1 / y_factor;
    y2 = y2 / y_factor;

    for (row = y1; row <= y2; row++)
        for (col = x1; col <= x2; ++col) {
     538:	e1570004 	cmp	r7, r4
     53c:	d1a03007 	movle	r3, r7
     540:	daffffec 	ble	4f8 <video_box+0x84>
     544:	eafffff5 	b	520 <video_box+0xac>

00000548 <resample_rgb>:
        }
}

int resample_rgb(int num_bits, int color) {
    return color; // desativa o processamento errado
}
     548:	e1a00001 	mov	r0, r1
     54c:	e12fff1e 	bx	lr

00000550 <draw_stars>:

    video_box(x, y, x + 5, y + 5, moon_color);         // lua cheia
    video_box(x + 3, y + 1, x + 5, y + 4, shadow_color); // sombra = lua minguante
}

void draw_stars(void) {
     550:	e92d45f0 	push	{r4, r5, r6, r7, r8, r10, lr}
     554:	e24dd00c 	sub	sp, sp, #12
    short star_color = resample_rgb(db, WHITE);
     558:	e3023c94 	movw	r3, #11412	; 0x2c94
     55c:	e3403000 	movt	r3, #0
     560:	e5930008 	ldr	r0, [r3, #8]
     564:	e30f1fff 	movw	r1, #65535	; 0xffff
     568:	ebfffff6 	bl	548 <resample_rgb>
     56c:	e3a04014 	mov	r4, #20
    int i;  // <-- declare aqui fora
    for (i = 0; i < 20; i++) {
        int x = random_range(0, STANDARD_X - 2);
     570:	e3a06000 	mov	r6, #0
     574:	e300a13e 	movw	r10, #318	; 0x13e
        int y = random_range(0, GROUND_Y - 20);
     578:	e3a080b4 	mov	r8, #180	; 0xb4
        video_box(x, y, x, y, star_color);
     57c:	e6bf7070 	sxth	r7, r0

void draw_stars(void) {
    short star_color = resample_rgb(db, WHITE);
    int i;  // <-- declare aqui fora
    for (i = 0; i < 20; i++) {
        int x = random_range(0, STANDARD_X - 2);
     580:	e1a00006 	mov	r0, r6
     584:	e1a0100a 	mov	r1, r10
     588:	ebffff64 	bl	320 <random_range>
     58c:	e1a05000 	mov	r5, r0
        int y = random_range(0, GROUND_Y - 20);
     590:	e1a00006 	mov	r0, r6
     594:	e1a01008 	mov	r1, r8
     598:	ebffff60 	bl	320 <random_range>
     59c:	e1a03000 	mov	r3, r0
        video_box(x, y, x, y, star_color);
     5a0:	e58d7000 	str	r7, [sp]
     5a4:	e1a00005 	mov	r0, r5
     5a8:	e1a01003 	mov	r1, r3
     5ac:	e1a02005 	mov	r2, r5
     5b0:	ebffffaf 	bl	474 <video_box>
}

void draw_stars(void) {
    short star_color = resample_rgb(db, WHITE);
    int i;  // <-- declare aqui fora
    for (i = 0; i < 20; i++) {
     5b4:	e2544001 	subs	r4, r4, #1
     5b8:	1afffff0 	bne	580 <draw_stars+0x30>
        int x = random_range(0, STANDARD_X - 2);
        int y = random_range(0, GROUND_Y - 20);
        video_box(x, y, x, y, star_color);
    }
}
     5bc:	e28dd00c 	add	sp, sp, #12
     5c0:	e8bd85f0 	pop	{r4, r5, r6, r7, r8, r10, pc}

000005c4 <draw_moon>:
    video_box(x + 2, y + 6, x + 2, y + 7, sun_color);
    video_box(x - 2, y + 2, x - 1, y + 2, sun_color);
    video_box(x + 6, y + 2, x + 7, y + 2, sun_color);
}

void draw_moon(int x, int y) {
     5c4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
     5c8:	e24dd008 	sub	sp, sp, #8
     5cc:	e1a05000 	mov	r5, r0
     5d0:	e1a04001 	mov	r4, r1
    short moon_color = resample_rgb(db, WHITE);
     5d4:	e3023c94 	movw	r3, #11412	; 0x2c94
     5d8:	e3403000 	movt	r3, #0
     5dc:	e5936008 	ldr	r6, [r3, #8]
     5e0:	e1a00006 	mov	r0, r6
     5e4:	e30f1fff 	movw	r1, #65535	; 0xffff
     5e8:	ebffffd6 	bl	548 <resample_rgb>
     5ec:	e1a08000 	mov	r8, r0
    short shadow_color = resample_rgb(db, 0x0010); // tom do céu noturno
     5f0:	e1a00006 	mov	r0, r6
     5f4:	e3a01010 	mov	r1, #16
     5f8:	ebffffd2 	bl	548 <resample_rgb>
     5fc:	e1a07000 	mov	r7, r0

    video_box(x, y, x + 5, y + 5, moon_color);         // lua cheia
     600:	e2856005 	add	r6, r5, #5
     604:	e6bf8078 	sxth	r8, r8
     608:	e58d8000 	str	r8, [sp]
     60c:	e1a00005 	mov	r0, r5
     610:	e1a01004 	mov	r1, r4
     614:	e1a02006 	mov	r2, r6
     618:	e2843005 	add	r3, r4, #5
     61c:	ebffff94 	bl	474 <video_box>
    video_box(x + 3, y + 1, x + 5, y + 4, shadow_color); // sombra = lua minguante
     620:	e6bf7077 	sxth	r7, r7
     624:	e58d7000 	str	r7, [sp]
     628:	e2850003 	add	r0, r5, #3
     62c:	e2841001 	add	r1, r4, #1
     630:	e1a02006 	mov	r2, r6
     634:	e2843004 	add	r3, r4, #4
     638:	ebffff8d 	bl	474 <video_box>
}
     63c:	e28dd008 	add	sp, sp, #8
     640:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00000644 <draw_sun>:
    video_box(x + 2, y + 2, x + 6, y + 4, color);   // centro
    video_box(x + 0, y + 3, x + 3, y + 5, color);   // bolha esquerda
    video_box(x + 5, y + 1, x + 9, y + 4, color);   // bolha direita
}

void draw_sun(int x, int y) {
     644:	e92d40f0 	push	{r4, r5, r6, r7, lr}
     648:	e24dd00c 	sub	sp, sp, #12
     64c:	e1a04000 	mov	r4, r0
     650:	e1a05001 	mov	r5, r1
    short sun_color = resample_rgb(db, 0xFFE0);  // amarelo forte
     654:	e3023c94 	movw	r3, #11412	; 0x2c94
     658:	e3403000 	movt	r3, #0
     65c:	e5930008 	ldr	r0, [r3, #8]
     660:	e30f1fe0 	movw	r1, #65504	; 0xffe0
     664:	ebffffb7 	bl	548 <resample_rgb>
    video_box(x, y, x + 4, y + 4, sun_color);     // centro
     668:	e6bf6070 	sxth	r6, r0
     66c:	e58d6000 	str	r6, [sp]
     670:	e1a00004 	mov	r0, r4
     674:	e1a01005 	mov	r1, r5
     678:	e2842004 	add	r2, r4, #4
     67c:	e2853004 	add	r3, r5, #4
     680:	ebffff7b 	bl	474 <video_box>
    // raios
    video_box(x + 2, y - 2, x + 2, y - 1, sun_color);
     684:	e2847002 	add	r7, r4, #2
     688:	e58d6000 	str	r6, [sp]
     68c:	e1a00007 	mov	r0, r7
     690:	e2451002 	sub	r1, r5, #2
     694:	e1a02007 	mov	r2, r7
     698:	e2453001 	sub	r3, r5, #1
     69c:	ebffff74 	bl	474 <video_box>
    video_box(x + 2, y + 6, x + 2, y + 7, sun_color);
     6a0:	e58d6000 	str	r6, [sp]
     6a4:	e1a00007 	mov	r0, r7
     6a8:	e2851006 	add	r1, r5, #6
     6ac:	e1a02007 	mov	r2, r7
     6b0:	e2853007 	add	r3, r5, #7
     6b4:	ebffff6e 	bl	474 <video_box>
    video_box(x - 2, y + 2, x - 1, y + 2, sun_color);
     6b8:	e2855002 	add	r5, r5, #2
     6bc:	e58d6000 	str	r6, [sp]
     6c0:	e2440002 	sub	r0, r4, #2
     6c4:	e1a01005 	mov	r1, r5
     6c8:	e2442001 	sub	r2, r4, #1
     6cc:	e1a03005 	mov	r3, r5
     6d0:	ebffff67 	bl	474 <video_box>
    video_box(x + 6, y + 2, x + 7, y + 2, sun_color);
     6d4:	e58d6000 	str	r6, [sp]
     6d8:	e2840006 	add	r0, r4, #6
     6dc:	e1a01005 	mov	r1, r5
     6e0:	e2842007 	add	r2, r4, #7
     6e4:	e1a03005 	mov	r3, r5
     6e8:	ebffff61 	bl	474 <video_box>
}
     6ec:	e28dd00c 	add	sp, sp, #12
     6f0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

000006f4 <draw_cloud>:
        }
    }
    video_text(1, 1, score_display);
}

void draw_cloud(int x, int y) {
     6f4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
     6f8:	e24dd00c 	sub	sp, sp, #12
     6fc:	e1a04000 	mov	r4, r0
     700:	e1a05001 	mov	r5, r1
    short color = resample_rgb(db, WHITE);
     704:	e3023c94 	movw	r3, #11412	; 0x2c94
     708:	e3403000 	movt	r3, #0
     70c:	e5930008 	ldr	r0, [r3, #8]
     710:	e30f1fff 	movw	r1, #65535	; 0xffff
     714:	ebffff8b 	bl	548 <resample_rgb>
    video_box(x + 2, y + 2, x + 6, y + 4, color);   // centro
     718:	e2857004 	add	r7, r5, #4
     71c:	e6bf6070 	sxth	r6, r0
     720:	e58d6000 	str	r6, [sp]
     724:	e2840002 	add	r0, r4, #2
     728:	e2851002 	add	r1, r5, #2
     72c:	e2842006 	add	r2, r4, #6
     730:	e1a03007 	mov	r3, r7
     734:	ebffff4e 	bl	474 <video_box>
    video_box(x + 0, y + 3, x + 3, y + 5, color);   // bolha esquerda
     738:	e58d6000 	str	r6, [sp]
     73c:	e1a00004 	mov	r0, r4
     740:	e2851003 	add	r1, r5, #3
     744:	e2842003 	add	r2, r4, #3
     748:	e2853005 	add	r3, r5, #5
     74c:	ebffff48 	bl	474 <video_box>
    video_box(x + 5, y + 1, x + 9, y + 4, color);   // bolha direita
     750:	e58d6000 	str	r6, [sp]
     754:	e2840005 	add	r0, r4, #5
     758:	e2851001 	add	r1, r5, #1
     75c:	e2842009 	add	r2, r4, #9
     760:	e1a03007 	mov	r3, r7
     764:	ebffff42 	bl	474 <video_box>
}
     768:	e28dd00c 	add	sp, sp, #12
     76c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00000770 <draw_ground>:
}




void draw_ground(void) {
     770:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     774:	e24dd014 	sub	sp, sp, #20
    short dirt_color = night_mode ? resample_rgb(db, 0x4208) : resample_rgb(db, GRAY);    // marrom escuro à noite
     778:	e3023c94 	movw	r3, #11412	; 0x2c94
     77c:	e3403000 	movt	r3, #0
     780:	e593300c 	ldr	r3, [r3, #12]
     784:	e3530000 	cmp	r3, #0
     788:	0a00000b 	beq	7bc <draw_ground+0x4c>
     78c:	e3023c94 	movw	r3, #11412	; 0x2c94
     790:	e3403000 	movt	r3, #0
     794:	e5934008 	ldr	r4, [r3, #8]
     798:	e1a00004 	mov	r0, r4
     79c:	e3041208 	movw	r1, #16904	; 0x4208
     7a0:	ebffff68 	bl	548 <resample_rgb>
     7a4:	e6ff5070 	uxth	r5, r0
    short grass_color = night_mode ? resample_rgb(db, 0x03E0) : resample_rgb(db, GREEN);  // verde musgo à noite
     7a8:	e1a00004 	mov	r0, r4
     7ac:	e3a01e3e 	mov	r1, #992	; 0x3e0
     7b0:	ebffff64 	bl	548 <resample_rgb>
     7b4:	e6ff7070 	uxth	r7, r0
     7b8:	ea00000a 	b	7e8 <draw_ground+0x78>




void draw_ground(void) {
    short dirt_color = night_mode ? resample_rgb(db, 0x4208) : resample_rgb(db, GRAY);    // marrom escuro à noite
     7bc:	e3023c94 	movw	r3, #11412	; 0x2c94
     7c0:	e3403000 	movt	r3, #0
     7c4:	e5934008 	ldr	r4, [r3, #8]
     7c8:	e1a00004 	mov	r0, r4
     7cc:	e3071bef 	movw	r1, #31727	; 0x7bef
     7d0:	ebffff5c 	bl	548 <resample_rgb>
     7d4:	e6ff5070 	uxth	r5, r0
    short grass_color = night_mode ? resample_rgb(db, 0x03E0) : resample_rgb(db, GREEN);  // verde musgo à noite
     7d8:	e1a00004 	mov	r0, r4
     7dc:	e3a01e7e 	mov	r1, #2016	; 0x7e0
     7e0:	ebffff58 	bl	548 <resample_rgb>
     7e4:	e6ff7070 	uxth	r7, r0
    short rock_color = resample_rgb(db, WHITE);
     7e8:	e3023c94 	movw	r3, #11412	; 0x2c94
     7ec:	e3403000 	movt	r3, #0
     7f0:	e5934008 	ldr	r4, [r3, #8]
     7f4:	e1a00004 	mov	r0, r4
     7f8:	e30f1fff 	movw	r1, #65535	; 0xffff
     7fc:	ebffff51 	bl	548 <resample_rgb>
     800:	e6ffb070 	uxth	r11, r0
    short crack_color = resample_rgb(db, BLACK);
     804:	e1a00004 	mov	r0, r4
     808:	e3a01000 	mov	r1, #0
     80c:	ebffff4d 	bl	548 <resample_rgb>
     810:	e6ff0070 	uxth	r0, r0
     814:	e58d000c 	str	r0, [sp, #12]
    short bone_color = resample_rgb(db, WHITE); // ossos brancos

    int x, y, height, i;

    // Faixa de terra
    video_box(0, GROUND_Y, STANDARD_X, GROUND_Y + 3, dirt_color);
     818:	e6bf5075 	sxth	r5, r5
     81c:	e58d5000 	str	r5, [sp]
     820:	e3a00000 	mov	r0, #0
     824:	e3a010c8 	mov	r1, #200	; 0xc8
     828:	e3a02d05 	mov	r2, #320	; 0x140
     82c:	e3a030cb 	mov	r3, #203	; 0xcb
     830:	ebffff0f 	bl	474 <video_box>

    // Grama irregular
    for (x = 0; x < STANDARD_X; x += 3) {
     834:	e3a04000 	mov	r4, #0
        height = random_range(1, 2);
     838:	e3a0a001 	mov	r10, #1
     83c:	e3a08002 	mov	r8, #2
        video_box(x, GROUND_Y - height, x + 1, GROUND_Y - 1, grass_color);
     840:	e6bf7077 	sxth	r7, r7
     844:	e3a060c7 	mov	r6, #199	; 0xc7

    // Faixa de terra
    video_box(0, GROUND_Y, STANDARD_X, GROUND_Y + 3, dirt_color);

    // Grama irregular
    for (x = 0; x < STANDARD_X; x += 3) {
     848:	e3005141 	movw	r5, #321	; 0x141
        height = random_range(1, 2);
     84c:	e1a0000a 	mov	r0, r10
     850:	e1a01008 	mov	r1, r8
     854:	ebfffeb1 	bl	320 <random_range>
        video_box(x, GROUND_Y - height, x + 1, GROUND_Y - 1, grass_color);
     858:	e26010c8 	rsb	r1, r0, #200	; 0xc8
     85c:	e58d7000 	str	r7, [sp]
     860:	e1a00004 	mov	r0, r4
     864:	e2842001 	add	r2, r4, #1
     868:	e1a03006 	mov	r3, r6
     86c:	ebffff00 	bl	474 <video_box>

    // Faixa de terra
    video_box(0, GROUND_Y, STANDARD_X, GROUND_Y + 3, dirt_color);

    // Grama irregular
    for (x = 0; x < STANDARD_X; x += 3) {
     870:	e2844003 	add	r4, r4, #3
     874:	e1540005 	cmp	r4, r5
     878:	1afffff3 	bne	84c <draw_ground+0xdc>
     87c:	e3a0400f 	mov	r4, #15
        video_box(x, GROUND_Y - height, x + 1, GROUND_Y - 1, grass_color);
    }

    // Pedras
    for (i = 0; i < 15; i++) {
        x = random_range(0, STANDARD_X - 2);
     880:	e3a09000 	mov	r9, #0
     884:	e300a13e 	movw	r10, #318	; 0x13e
        y = random_range(GROUND_Y + 1, GROUND_Y + 3);
     888:	e3a080c9 	mov	r8, #201	; 0xc9
     88c:	e3a070cb 	mov	r7, #203	; 0xcb
        video_box(x, y, x + 1, y + 1, rock_color);
     890:	e6bf607b 	sxth	r6, r11
        video_box(x, GROUND_Y - height, x + 1, GROUND_Y - 1, grass_color);
    }

    // Pedras
    for (i = 0; i < 15; i++) {
        x = random_range(0, STANDARD_X - 2);
     894:	e1a00009 	mov	r0, r9
     898:	e1a0100a 	mov	r1, r10
     89c:	ebfffe9f 	bl	320 <random_range>
     8a0:	e1a05000 	mov	r5, r0
        y = random_range(GROUND_Y + 1, GROUND_Y + 3);
     8a4:	e1a00008 	mov	r0, r8
     8a8:	e1a01007 	mov	r1, r7
     8ac:	ebfffe9b 	bl	320 <random_range>
     8b0:	e1a03000 	mov	r3, r0
        video_box(x, y, x + 1, y + 1, rock_color);
     8b4:	e58d6000 	str	r6, [sp]
     8b8:	e1a00005 	mov	r0, r5
     8bc:	e1a01003 	mov	r1, r3
     8c0:	e2852001 	add	r2, r5, #1
     8c4:	e2833001 	add	r3, r3, #1
     8c8:	ebfffee9 	bl	474 <video_box>
        height = random_range(1, 2);
        video_box(x, GROUND_Y - height, x + 1, GROUND_Y - 1, grass_color);
    }

    // Pedras
    for (i = 0; i < 15; i++) {
     8cc:	e2544001 	subs	r4, r4, #1
     8d0:	1affffef 	bne	894 <draw_ground+0x124>
     8d4:	e3a0400a 	mov	r4, #10
        video_box(x, y, x + 1, y + 1, rock_color);
    }

    // Rachaduras
    for (i = 0; i < 10; i++) {
        x = random_range(0, STANDARD_X - 5);
     8d8:	e3a0a000 	mov	r10, #0
     8dc:	e300813b 	movw	r8, #315	; 0x13b
        y = GROUND_Y + random_range(2, 3);
     8e0:	e3a07002 	mov	r7, #2
     8e4:	e3a06003 	mov	r6, #3
        video_box(x, y, x + 3, y, crack_color);
     8e8:	e59d300c 	ldr	r3, [sp, #12]
     8ec:	e6bf9073 	sxth	r9, r3
        video_box(x, y, x + 1, y + 1, rock_color);
    }

    // Rachaduras
    for (i = 0; i < 10; i++) {
        x = random_range(0, STANDARD_X - 5);
     8f0:	e1a0000a 	mov	r0, r10
     8f4:	e1a01008 	mov	r1, r8
     8f8:	ebfffe88 	bl	320 <random_range>
     8fc:	e1a05000 	mov	r5, r0
        y = GROUND_Y + random_range(2, 3);
     900:	e1a00007 	mov	r0, r7
     904:	e1a01006 	mov	r1, r6
     908:	ebfffe84 	bl	320 <random_range>
     90c:	e28030c8 	add	r3, r0, #200	; 0xc8
        video_box(x, y, x + 3, y, crack_color);
     910:	e58d9000 	str	r9, [sp]
     914:	e1a00005 	mov	r0, r5
     918:	e1a01003 	mov	r1, r3
     91c:	e2852003 	add	r2, r5, #3
     920:	ebfffed3 	bl	474 <video_box>
        y = random_range(GROUND_Y + 1, GROUND_Y + 3);
        video_box(x, y, x + 1, y + 1, rock_color);
    }

    // Rachaduras
    for (i = 0; i < 10; i++) {
     924:	e2544001 	subs	r4, r4, #1
     928:	1afffff0 	bne	8f0 <draw_ground+0x180>
     92c:	e3a05005 	mov	r5, #5
        video_box(x, y, x + 3, y, crack_color);
    }

    // Ossos de dinossauro (blocos 4x3)
    for (i = 0; i < 5; i++) {
        x = random_range(0, STANDARD_X - 5);
     930:	e3a0a000 	mov	r10, #0
     934:	e300813b 	movw	r8, #315	; 0x13b
        y = GROUND_Y + 1;

        // Forma: H com bordas
        video_box(x,     y,     x,     y + 2, bone_color); // lado esquerdo
     938:	e6bfb07b 	sxth	r11, r11
     93c:	e3a070c9 	mov	r7, #201	; 0xc9
     940:	e3a060cb 	mov	r6, #203	; 0xcb
        video_box(x + 1, y + 1, x + 2, y + 1, bone_color); // meio
     944:	e3a090ca 	mov	r9, #202	; 0xca
        video_box(x, y, x + 3, y, crack_color);
    }

    // Ossos de dinossauro (blocos 4x3)
    for (i = 0; i < 5; i++) {
        x = random_range(0, STANDARD_X - 5);
     948:	e1a0000a 	mov	r0, r10
     94c:	e1a01008 	mov	r1, r8
     950:	ebfffe72 	bl	320 <random_range>
     954:	e1a04000 	mov	r4, r0
        y = GROUND_Y + 1;

        // Forma: H com bordas
        video_box(x,     y,     x,     y + 2, bone_color); // lado esquerdo
     958:	e58db000 	str	r11, [sp]
     95c:	e1a01007 	mov	r1, r7
     960:	e1a02000 	mov	r2, r0
     964:	e1a03006 	mov	r3, r6
     968:	ebfffec1 	bl	474 <video_box>
        video_box(x + 1, y + 1, x + 2, y + 1, bone_color); // meio
     96c:	e58db000 	str	r11, [sp]
     970:	e2840001 	add	r0, r4, #1
     974:	e1a01009 	mov	r1, r9
     978:	e2842002 	add	r2, r4, #2
     97c:	e1a03009 	mov	r3, r9
     980:	ebfffebb 	bl	474 <video_box>
        video_box(x + 3, y,     x + 3, y + 2, bone_color); // lado direito
     984:	e2842003 	add	r2, r4, #3
     988:	e58db000 	str	r11, [sp]
     98c:	e1a00002 	mov	r0, r2
     990:	e1a01007 	mov	r1, r7
     994:	e1a03006 	mov	r3, r6
     998:	ebfffeb5 	bl	474 <video_box>
        y = GROUND_Y + random_range(2, 3);
        video_box(x, y, x + 3, y, crack_color);
    }

    // Ossos de dinossauro (blocos 4x3)
    for (i = 0; i < 5; i++) {
     99c:	e2555001 	subs	r5, r5, #1
     9a0:	1affffe8 	bne	948 <draw_ground+0x1d8>
        // Forma: H com bordas
        video_box(x,     y,     x,     y + 2, bone_color); // lado esquerdo
        video_box(x + 1, y + 1, x + 2, y + 1, bone_color); // meio
        video_box(x + 3, y,     x + 3, y + 2, bone_color); // lado direito
    }
}
     9a4:	e28dd014 	add	sp, sp, #20
     9a8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

000009ac <draw_bird>:
            }
        }
    }
}

void draw_bird(int x, int y, int frame) {
     9ac:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     9b0:	e24ddfa3 	sub	sp, sp, #652	; 0x28c
     9b4:	e1a09000 	mov	r9, r0
     9b8:	e1a0b001 	mov	r11, r1
     9bc:	e1a05002 	mov	r5, r2
    const unsigned char bird1[20][16] = {
     9c0:	e3a06d05 	mov	r6, #320	; 0x140
     9c4:	e28d0f52 	add	r0, sp, #328	; 0x148
     9c8:	e3a01000 	mov	r1, #0
     9cc:	e1a02006 	mov	r2, r6
     9d0:	eb00045a 	bl	1b40 <memset>
     9d4:	e3a04001 	mov	r4, #1
     9d8:	e5cd418f 	strb	r4, [sp, #399]	; 0x18f
     9dc:	e5cd419f 	strb	r4, [sp, #415]	; 0x19f
     9e0:	e5cd41af 	strb	r4, [sp, #431]	; 0x1af
     9e4:	e5cd41b0 	strb	r4, [sp, #432]	; 0x1b0
     9e8:	e5cd41bf 	strb	r4, [sp, #447]	; 0x1bf
     9ec:	e5cd41c0 	strb	r4, [sp, #448]	; 0x1c0
     9f0:	e5cd41c1 	strb	r4, [sp, #449]	; 0x1c1
     9f4:	e5cd41cb 	strb	r4, [sp, #459]	; 0x1cb
     9f8:	e5cd41cc 	strb	r4, [sp, #460]	; 0x1cc
     9fc:	e5cd41cd 	strb	r4, [sp, #461]	; 0x1cd
     a00:	e5cd41cf 	strb	r4, [sp, #463]	; 0x1cf
     a04:	e5cd41d1 	strb	r4, [sp, #465]	; 0x1d1
     a08:	e5cd41d2 	strb	r4, [sp, #466]	; 0x1d2
     a0c:	e5cd41da 	strb	r4, [sp, #474]	; 0x1da
     a10:	e5cd41db 	strb	r4, [sp, #475]	; 0x1db
     a14:	e5cd41dc 	strb	r4, [sp, #476]	; 0x1dc
     a18:	e5cd41dd 	strb	r4, [sp, #477]	; 0x1dd
     a1c:	e5cd41df 	strb	r4, [sp, #479]	; 0x1df
     a20:	e5cd41e0 	strb	r4, [sp, #480]	; 0x1e0
     a24:	e5cd41e1 	strb	r4, [sp, #481]	; 0x1e1
     a28:	e5cd41e2 	strb	r4, [sp, #482]	; 0x1e2
     a2c:	e5cd41e3 	strb	r4, [sp, #483]	; 0x1e3
     a30:	e5cd41e4 	strb	r4, [sp, #484]	; 0x1e4
     a34:	e5cd41ea 	strb	r4, [sp, #490]	; 0x1ea
     a38:	e5cd41eb 	strb	r4, [sp, #491]	; 0x1eb
     a3c:	e5cd41ec 	strb	r4, [sp, #492]	; 0x1ec
     a40:	e5cd41ed 	strb	r4, [sp, #493]	; 0x1ed
     a44:	e5cd41ef 	strb	r4, [sp, #495]	; 0x1ef
     a48:	e5cd41f0 	strb	r4, [sp, #496]	; 0x1f0
     a4c:	e5cd41f1 	strb	r4, [sp, #497]	; 0x1f1
     a50:	e5cd41f2 	strb	r4, [sp, #498]	; 0x1f2
     a54:	e5cd41f3 	strb	r4, [sp, #499]	; 0x1f3
     a58:	e5cd41f9 	strb	r4, [sp, #505]	; 0x1f9
     a5c:	e5cd41fa 	strb	r4, [sp, #506]	; 0x1fa
     a60:	e5cd41fb 	strb	r4, [sp, #507]	; 0x1fb
     a64:	e5cd41fc 	strb	r4, [sp, #508]	; 0x1fc
     a68:	e5cd41fd 	strb	r4, [sp, #509]	; 0x1fd
     a6c:	e5cd41fe 	strb	r4, [sp, #510]	; 0x1fe
     a70:	e5cd41ff 	strb	r4, [sp, #511]	; 0x1ff
     a74:	e5cd4200 	strb	r4, [sp, #512]	; 0x200
     a78:	e5cd4201 	strb	r4, [sp, #513]	; 0x201
     a7c:	e5cd4202 	strb	r4, [sp, #514]	; 0x202
     a80:	e5cd4203 	strb	r4, [sp, #515]	; 0x203
     a84:	e5cd4204 	strb	r4, [sp, #516]	; 0x204
     a88:	e5cd4205 	strb	r4, [sp, #517]	; 0x205
     a8c:	e5cd4206 	strb	r4, [sp, #518]	; 0x206
     a90:	e5cd420e 	strb	r4, [sp, #526]	; 0x20e
     a94:	e5cd420f 	strb	r4, [sp, #527]	; 0x20f
     a98:	e5cd4210 	strb	r4, [sp, #528]	; 0x210
     a9c:	e5cd4211 	strb	r4, [sp, #529]	; 0x211
     aa0:	e5cd4212 	strb	r4, [sp, #530]	; 0x212
     aa4:	e5cd4213 	strb	r4, [sp, #531]	; 0x213
     aa8:	e5cd4214 	strb	r4, [sp, #532]	; 0x214
     aac:	e5cd4215 	strb	r4, [sp, #533]	; 0x215
     ab0:	e5cd4220 	strb	r4, [sp, #544]	; 0x220
     ab4:	e5cd4221 	strb	r4, [sp, #545]	; 0x221
     ab8:	e5cd4222 	strb	r4, [sp, #546]	; 0x222
     abc:	e5cd4223 	strb	r4, [sp, #547]	; 0x223
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
};


     const unsigned char bird2[20][16] = {
     ac0:	e28d0008 	add	r0, sp, #8
     ac4:	e3a01000 	mov	r1, #0
     ac8:	e1a02006 	mov	r2, r6
     acc:	eb00041b 	bl	1b40 <memset>
     ad0:	e5cd408b 	strb	r4, [sp, #139]	; 0x8b
     ad4:	e5cd408c 	strb	r4, [sp, #140]	; 0x8c
     ad8:	e5cd408d 	strb	r4, [sp, #141]	; 0x8d
     adc:	e5cd409a 	strb	r4, [sp, #154]	; 0x9a
     ae0:	e5cd409b 	strb	r4, [sp, #155]	; 0x9b
     ae4:	e5cd409c 	strb	r4, [sp, #156]	; 0x9c
     ae8:	e5cd409d 	strb	r4, [sp, #157]	; 0x9d
     aec:	e5cd409f 	strb	r4, [sp, #159]	; 0x9f
     af0:	e5cd40a0 	strb	r4, [sp, #160]	; 0xa0
     af4:	e5cd40a1 	strb	r4, [sp, #161]	; 0xa1
     af8:	e5cd40a2 	strb	r4, [sp, #162]	; 0xa2
     afc:	e5cd40a3 	strb	r4, [sp, #163]	; 0xa3
     b00:	e5cd40a4 	strb	r4, [sp, #164]	; 0xa4
     b04:	e5cd40aa 	strb	r4, [sp, #170]	; 0xaa
     b08:	e5cd40ab 	strb	r4, [sp, #171]	; 0xab
     b0c:	e5cd40ac 	strb	r4, [sp, #172]	; 0xac
     b10:	e5cd40ad 	strb	r4, [sp, #173]	; 0xad
     b14:	e5cd40af 	strb	r4, [sp, #175]	; 0xaf
     b18:	e5cd40b1 	strb	r4, [sp, #177]	; 0xb1
     b1c:	e5cd40b2 	strb	r4, [sp, #178]	; 0xb2
     b20:	e5cd40b3 	strb	r4, [sp, #179]	; 0xb3
     b24:	e5cd40b9 	strb	r4, [sp, #185]	; 0xb9
     b28:	e5cd40ba 	strb	r4, [sp, #186]	; 0xba
     b2c:	e5cd40bb 	strb	r4, [sp, #187]	; 0xbb
     b30:	e5cd40bc 	strb	r4, [sp, #188]	; 0xbc
     b34:	e5cd40bd 	strb	r4, [sp, #189]	; 0xbd
     b38:	e5cd40be 	strb	r4, [sp, #190]	; 0xbe
     b3c:	e5cd40bf 	strb	r4, [sp, #191]	; 0xbf
     b40:	e5cd40c0 	strb	r4, [sp, #192]	; 0xc0
     b44:	e5cd40c1 	strb	r4, [sp, #193]	; 0xc1
     b48:	e5cd40c2 	strb	r4, [sp, #194]	; 0xc2
     b4c:	e5cd40c3 	strb	r4, [sp, #195]	; 0xc3
     b50:	e5cd40c4 	strb	r4, [sp, #196]	; 0xc4
     b54:	e5cd40c5 	strb	r4, [sp, #197]	; 0xc5
     b58:	e5cd40c6 	strb	r4, [sp, #198]	; 0xc6
     b5c:	e5cd40ce 	strb	r4, [sp, #206]	; 0xce
     b60:	e5cd40cf 	strb	r4, [sp, #207]	; 0xcf
     b64:	e5cd40d0 	strb	r4, [sp, #208]	; 0xd0
     b68:	e5cd40d1 	strb	r4, [sp, #209]	; 0xd1
     b6c:	e5cd40d2 	strb	r4, [sp, #210]	; 0xd2
     b70:	e5cd40d3 	strb	r4, [sp, #211]	; 0xd3
     b74:	e5cd40d4 	strb	r4, [sp, #212]	; 0xd4
     b78:	e5cd40d5 	strb	r4, [sp, #213]	; 0xd5
     b7c:	e5cd40e0 	strb	r4, [sp, #224]	; 0xe0
     b80:	e5cd40e1 	strb	r4, [sp, #225]	; 0xe1
     b84:	e5cd40e2 	strb	r4, [sp, #226]	; 0xe2
     b88:	e5cd40e3 	strb	r4, [sp, #227]	; 0xe3
     b8c:	e5cd40f0 	strb	r4, [sp, #240]	; 0xf0
     b90:	e5cd40f1 	strb	r4, [sp, #241]	; 0xf1
     b94:	e5cd40f2 	strb	r4, [sp, #242]	; 0xf2
     b98:	e5cd40f3 	strb	r4, [sp, #243]	; 0xf3
     b9c:	e5cd4100 	strb	r4, [sp, #256]	; 0x100
     ba0:	e5cd4101 	strb	r4, [sp, #257]	; 0x101
     ba4:	e5cd4102 	strb	r4, [sp, #258]	; 0x102
     ba8:	e5cd4110 	strb	r4, [sp, #272]	; 0x110
     bac:	e5cd4111 	strb	r4, [sp, #273]	; 0x111
     bb0:	e5cd4120 	strb	r4, [sp, #288]	; 0x120
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
};



    short color = night_mode ? resample_rgb(db, 0x8410) : resample_rgb(db, WHITE);
     bb4:	e3023c94 	movw	r3, #11412	; 0x2c94
     bb8:	e3403000 	movt	r3, #0
     bbc:	e593300c 	ldr	r3, [r3, #12]
     bc0:	e3530000 	cmp	r3, #0
     bc4:	e3023c94 	movw	r3, #11412	; 0x2c94
     bc8:	e3403000 	movt	r3, #0
     bcc:	e5930008 	ldr	r0, [r3, #8]
     bd0:	13081410 	movwne	r1, #33808	; 0x8410
     bd4:	030f1fff 	movweq	r1, #65535	; 0xffff
     bd8:	ebfffe5a 	bl	548 <resample_rgb>
     bdc:	e6ff0070 	uxth	r0, r0
    int row, col;
    const unsigned char (*bird)[16];

    if ((frame / 10) % 2 == 0) {
     be0:	e3063667 	movw	r3, #26215	; 0x6667
     be4:	e3463666 	movt	r3, #26214	; 0x6666
     be8:	e0c32593 	smull	r2, r3, r3, r5
     bec:	e1a05fc5 	asr	r5, r5, #31
     bf0:	e0653143 	rsb	r3, r5, r3, asr #2
     bf4:	e3130001 	tst	r3, #1
            bird = bird1;
     bf8:	028d8f52 	addeq	r8, sp, #328	; 0x148
        } else {
            bird = bird2;
     bfc:	128d8008 	addne	r8, sp, #8
        }

    for (row = 0; row < 20; row++) {
     c00:	e3a07000 	mov	r7, #0
        for (col = 0; col < 16; col++) {
            if (bird[row][col] == 1) {
                int x1 = x + col;
                int y1 = y + row;
                video_box(x1, y1, x1, y1, color);
     c04:	e6bfa070 	sxth	r10, r0
     c08:	ea00000f 	b	c4c <draw_bird+0x2a0>
            bird = bird2;
        }

    for (row = 0; row < 20; row++) {
        for (col = 0; col < 16; col++) {
            if (bird[row][col] == 1) {
     c0c:	e7d53004 	ldrb	r3, [r5, r4]
     c10:	e3530001 	cmp	r3, #1
     c14:	1a000005 	bne	c30 <draw_bird+0x284>
            }
        }
    }
}

void draw_bird(int x, int y, int frame) {
     c18:	e0842009 	add	r2, r4, r9
    for (row = 0; row < 20; row++) {
        for (col = 0; col < 16; col++) {
            if (bird[row][col] == 1) {
                int x1 = x + col;
                int y1 = y + row;
                video_box(x1, y1, x1, y1, color);
     c1c:	e58da000 	str	r10, [sp]
     c20:	e1a00002 	mov	r0, r2
     c24:	e1a01006 	mov	r1, r6
     c28:	e1a03006 	mov	r3, r6
     c2c:	ebfffe10 	bl	474 <video_box>
        } else {
            bird = bird2;
        }

    for (row = 0; row < 20; row++) {
        for (col = 0; col < 16; col++) {
     c30:	e2844001 	add	r4, r4, #1
     c34:	e3540010 	cmp	r4, #16
     c38:	1afffff3 	bne	c0c <draw_bird+0x260>
            bird = bird1;
        } else {
            bird = bird2;
        }

    for (row = 0; row < 20; row++) {
     c3c:	e2877001 	add	r7, r7, #1
     c40:	e2888010 	add	r8, r8, #16
     c44:	e3570014 	cmp	r7, #20
     c48:	0a000003 	beq	c5c <draw_bird+0x2b0>
        for (col = 0; col < 16; col++) {
            if (bird[row][col] == 1) {
     c4c:	e1a05008 	mov	r5, r8
     c50:	e3a04000 	mov	r4, #0
            }
        }
    }
}

void draw_bird(int x, int y, int frame) {
     c54:	e087600b 	add	r6, r7, r11
     c58:	eaffffeb 	b	c0c <draw_bird+0x260>
                int y1 = y + row;
                video_box(x1, y1, x1, y1, color);
            }
        }
    }
}
     c5c:	e28ddfa3 	add	sp, sp, #652	; 0x28c
     c60:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

00000c64 <draw_obstacle>:
}




void draw_obstacle(int x, int y) {
     c64:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
     c68:	e24ddf52 	sub	sp, sp, #328	; 0x148
     c6c:	e1a08000 	mov	r8, r0
     c70:	e1a09001 	mov	r9, r1
    const unsigned char cactus[20][16] = {
     c74:	e28d4008 	add	r4, sp, #8
     c78:	e1a00004 	mov	r0, r4
     c7c:	e3a01000 	mov	r1, #0
     c80:	e3a02d05 	mov	r2, #320	; 0x140
     c84:	eb0003ad 	bl	1b40 <memset>
     c88:	e3a03001 	mov	r3, #1
     c8c:	e5cd3010 	strb	r3, [sp, #16]
     c90:	e5cd3011 	strb	r3, [sp, #17]
     c94:	e5cd3020 	strb	r3, [sp, #32]
     c98:	e5cd3021 	strb	r3, [sp, #33]	; 0x21
     c9c:	e5cd3030 	strb	r3, [sp, #48]	; 0x30
     ca0:	e5cd3031 	strb	r3, [sp, #49]	; 0x31
     ca4:	e5cd303e 	strb	r3, [sp, #62]	; 0x3e
     ca8:	e5cd303f 	strb	r3, [sp, #63]	; 0x3f
     cac:	e5cd3040 	strb	r3, [sp, #64]	; 0x40
     cb0:	e5cd3041 	strb	r3, [sp, #65]	; 0x41
     cb4:	e5cd304d 	strb	r3, [sp, #77]	; 0x4d
     cb8:	e5cd304e 	strb	r3, [sp, #78]	; 0x4e
     cbc:	e5cd304f 	strb	r3, [sp, #79]	; 0x4f
     cc0:	e5cd3050 	strb	r3, [sp, #80]	; 0x50
     cc4:	e5cd3051 	strb	r3, [sp, #81]	; 0x51
     cc8:	e5cd3052 	strb	r3, [sp, #82]	; 0x52
     ccc:	e5cd305d 	strb	r3, [sp, #93]	; 0x5d
     cd0:	e5cd305e 	strb	r3, [sp, #94]	; 0x5e
     cd4:	e5cd305f 	strb	r3, [sp, #95]	; 0x5f
     cd8:	e5cd3060 	strb	r3, [sp, #96]	; 0x60
     cdc:	e5cd3061 	strb	r3, [sp, #97]	; 0x61
     ce0:	e5cd3062 	strb	r3, [sp, #98]	; 0x62
     ce4:	e5cd306d 	strb	r3, [sp, #109]	; 0x6d
     ce8:	e5cd306e 	strb	r3, [sp, #110]	; 0x6e
     cec:	e5cd306f 	strb	r3, [sp, #111]	; 0x6f
     cf0:	e5cd3070 	strb	r3, [sp, #112]	; 0x70
     cf4:	e5cd3071 	strb	r3, [sp, #113]	; 0x71
     cf8:	e5cd3072 	strb	r3, [sp, #114]	; 0x72
     cfc:	e5cd3074 	strb	r3, [sp, #116]	; 0x74
     d00:	e5cd3075 	strb	r3, [sp, #117]	; 0x75
     d04:	e5cd307d 	strb	r3, [sp, #125]	; 0x7d
     d08:	e5cd307e 	strb	r3, [sp, #126]	; 0x7e
     d0c:	e5cd307f 	strb	r3, [sp, #127]	; 0x7f
     d10:	e5cd3080 	strb	r3, [sp, #128]	; 0x80
     d14:	e5cd3081 	strb	r3, [sp, #129]	; 0x81
     d18:	e5cd3082 	strb	r3, [sp, #130]	; 0x82
     d1c:	e5cd3084 	strb	r3, [sp, #132]	; 0x84
     d20:	e5cd3085 	strb	r3, [sp, #133]	; 0x85
     d24:	e5cd308f 	strb	r3, [sp, #143]	; 0x8f
     d28:	e5cd3090 	strb	r3, [sp, #144]	; 0x90
     d2c:	e5cd3094 	strb	r3, [sp, #148]	; 0x94
     d30:	e5cd3095 	strb	r3, [sp, #149]	; 0x95
     d34:	e5cd309f 	strb	r3, [sp, #159]	; 0x9f
     d38:	e5cd30a0 	strb	r3, [sp, #160]	; 0xa0
     d3c:	e5cd30a4 	strb	r3, [sp, #164]	; 0xa4
     d40:	e5cd30a5 	strb	r3, [sp, #165]	; 0xa5
     d44:	e5cd30af 	strb	r3, [sp, #175]	; 0xaf
     d48:	e5cd30b0 	strb	r3, [sp, #176]	; 0xb0
     d4c:	e5cd30b4 	strb	r3, [sp, #180]	; 0xb4
     d50:	e5cd30b5 	strb	r3, [sp, #181]	; 0xb5
     d54:	e5cd30bf 	strb	r3, [sp, #191]	; 0xbf
     d58:	e5cd30c0 	strb	r3, [sp, #192]	; 0xc0
     d5c:	e5cd30c1 	strb	r3, [sp, #193]	; 0xc1
     d60:	e5cd30c2 	strb	r3, [sp, #194]	; 0xc2
     d64:	e5cd30c3 	strb	r3, [sp, #195]	; 0xc3
     d68:	e5cd30c4 	strb	r3, [sp, #196]	; 0xc4
     d6c:	e5cd30c5 	strb	r3, [sp, #197]	; 0xc5
     d70:	e5cd30d0 	strb	r3, [sp, #208]	; 0xd0
     d74:	e5cd30d1 	strb	r3, [sp, #209]	; 0xd1
     d78:	e5cd30d2 	strb	r3, [sp, #210]	; 0xd2
     d7c:	e5cd30d3 	strb	r3, [sp, #211]	; 0xd3
     d80:	e5cd30d4 	strb	r3, [sp, #212]	; 0xd4
     d84:	e5cd30e0 	strb	r3, [sp, #224]	; 0xe0
     d88:	e5cd30e1 	strb	r3, [sp, #225]	; 0xe1
     d8c:	e5cd30f0 	strb	r3, [sp, #240]	; 0xf0
     d90:	e5cd30f1 	strb	r3, [sp, #241]	; 0xf1
     d94:	e5cd3100 	strb	r3, [sp, #256]	; 0x100
     d98:	e5cd3101 	strb	r3, [sp, #257]	; 0x101
     d9c:	e5cd3110 	strb	r3, [sp, #272]	; 0x110
     da0:	e5cd3111 	strb	r3, [sp, #273]	; 0x111
     da4:	e5cd3120 	strb	r3, [sp, #288]	; 0x120
     da8:	e5cd3121 	strb	r3, [sp, #289]	; 0x121
     dac:	e5cd3130 	strb	r3, [sp, #304]	; 0x130
     db0:	e5cd3131 	strb	r3, [sp, #305]	; 0x131
     db4:	e5cd3140 	strb	r3, [sp, #320]	; 0x140
     db8:	e5cd3141 	strb	r3, [sp, #321]	; 0x141
};



    int row, col;
    short color = resample_rgb(db, GREEN);
     dbc:	e3023c94 	movw	r3, #11412	; 0x2c94
     dc0:	e3403000 	movt	r3, #0
     dc4:	e5930008 	ldr	r0, [r3, #8]
     dc8:	e3a01e7e 	mov	r1, #2016	; 0x7e0
     dcc:	ebfffddd 	bl	548 <resample_rgb>
     dd0:	e284500f 	add	r5, r4, #15
     dd4:	e0648008 	rsb	r8, r4, r8
     for (row = 0; row < 20; row++) {
     dd8:	e3a07000 	mov	r7, #0
        for (col = 0; col < 16; col++) {
            if (cactus[row][col] == 1) {
                int x1 = x + col;
                int y1 = y + row;
                video_box(x1, y1, x1, y1, color);
     ddc:	e6bfa070 	sxth	r10, r0
     de0:	ea00000f 	b	e24 <draw_obstacle+0x1c0>

    int row, col;
    short color = resample_rgb(db, GREEN);
     for (row = 0; row < 20; row++) {
        for (col = 0; col < 16; col++) {
            if (cactus[row][col] == 1) {
     de4:	e5f42001 	ldrb	r2, [r4, #1]!
     de8:	e3520001 	cmp	r2, #1
     dec:	1a000005 	bne	e08 <draw_obstacle+0x1a4>
}




void draw_obstacle(int x, int y) {
     df0:	e0842008 	add	r2, r4, r8
     for (row = 0; row < 20; row++) {
        for (col = 0; col < 16; col++) {
            if (cactus[row][col] == 1) {
                int x1 = x + col;
                int y1 = y + row;
                video_box(x1, y1, x1, y1, color);
     df4:	e58da000 	str	r10, [sp]
     df8:	e1a00002 	mov	r0, r2
     dfc:	e1a01006 	mov	r1, r6
     e00:	e1a03006 	mov	r3, r6
     e04:	ebfffd9a 	bl	474 <video_box>


    int row, col;
    short color = resample_rgb(db, GREEN);
     for (row = 0; row < 20; row++) {
        for (col = 0; col < 16; col++) {
     e08:	e1550004 	cmp	r5, r4
     e0c:	1afffff4 	bne	de4 <draw_obstacle+0x180>



    int row, col;
    short color = resample_rgb(db, GREEN);
     for (row = 0; row < 20; row++) {
     e10:	e2877001 	add	r7, r7, #1
     e14:	e2855010 	add	r5, r5, #16
     e18:	e2488010 	sub	r8, r8, #16
     e1c:	e3570014 	cmp	r7, #20
     e20:	0a000004 	beq	e38 <draw_obstacle+0x1d4>
}




void draw_obstacle(int x, int y) {
     e24:	e28d3008 	add	r3, sp, #8
     e28:	e0834207 	add	r4, r3, r7, lsl #4
     e2c:	e2444001 	sub	r4, r4, #1
     e30:	e0876009 	add	r6, r7, r9
     e34:	eaffffea 	b	de4 <draw_obstacle+0x180>
                int y1 = y + row;
                video_box(x1, y1, x1, y1, color);
            }
        }
    }
}
     e38:	e28ddf52 	add	sp, sp, #328	; 0x148
     e3c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}

00000e40 <draw_dino>:
    short bg_color = night_mode ? resample_rgb(db, 0x0010) : resample_rgb(db, BLACK); // Azul escuro à noite
    video_box(0, 0, STANDARD_X, STANDARD_Y, bg_color);
}


void draw_dino(int x, int y, int frame, int is_jumping) {
     e40:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     e44:	e24ddfa3 	sub	sp, sp, #652	; 0x28c
     e48:	e1a09000 	mov	r9, r0
     e4c:	e1a0b001 	mov	r11, r1
     e50:	e1a06002 	mov	r6, r2
     e54:	e1a07003 	mov	r7, r3
    short color = night_mode ? resample_rgb(db, 0xC618) : resample_rgb(db, GREEN);
     e58:	e3021c94 	movw	r1, #11412	; 0x2c94
     e5c:	e3401000 	movt	r1, #0
     e60:	e591300c 	ldr	r3, [r1, #12]
     e64:	e3530000 	cmp	r3, #0
     e68:	e3023c94 	movw	r3, #11412	; 0x2c94
     e6c:	11a03001 	movne	r3, r1
     e70:	15930008 	ldrne	r0, [r3, #8]
     e74:	130c1618 	movwne	r1, #50712	; 0xc618
     e78:	03403000 	movteq	r3, #0
     e7c:	05930008 	ldreq	r0, [r3, #8]
     e80:	03a01e7e 	moveq	r1, #2016	; 0x7e0
     e84:	ebfffdaf 	bl	548 <resample_rgb>
     e88:	e6ffa070 	uxth	r10, r0

    const unsigned char dino1[20][16] = {
     e8c:	e30240d0 	movw	r4, #8400	; 0x20d0
     e90:	e3404000 	movt	r4, #0
     e94:	e3a05d05 	mov	r5, #320	; 0x140
     e98:	e28d0f52 	add	r0, sp, #328	; 0x148
     e9c:	e2841014 	add	r1, r4, #20
     ea0:	e1a02005 	mov	r2, r5
     ea4:	eb0002a2 	bl	1934 <memcpy>
    {0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0},
    {0,0,0,0,1,1,0,1,1,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
};

    const unsigned char dino2[20][16] = {
     ea8:	e28d0008 	add	r0, sp, #8
     eac:	e2841f55 	add	r1, r4, #340	; 0x154
     eb0:	e1a02005 	mov	r2, r5
     eb4:	eb00029e 	bl	1934 <memcpy>
};

    int row;
    int col;
    const unsigned char (*dino_bitmap)[16];
    if (is_jumping != 0) {
     eb8:	e3570000 	cmp	r7, #0
        dino_bitmap = dino1; // Usa sprite padrão durante o pulo
     ebc:	128d8f52 	addne	r8, sp, #328	; 0x148
};

    int row;
    int col;
    const unsigned char (*dino_bitmap)[16];
    if (is_jumping != 0) {
     ec0:	1a000009 	bne	eec <draw_dino+0xac>
        dino_bitmap = dino1; // Usa sprite padrão durante o pulo
    } else {
        if ((frame / 10) % 2 == 0) {
     ec4:	e3063667 	movw	r3, #26215	; 0x6667
     ec8:	e3463666 	movt	r3, #26214	; 0x6666
     ecc:	e0c32693 	smull	r2, r3, r3, r6
     ed0:	e1a06fc6 	asr	r6, r6, #31
     ed4:	e0663143 	rsb	r3, r6, r3, asr #2
     ed8:	e3130001 	tst	r3, #1
            dino_bitmap = dino1;
     edc:	028d8f52 	addeq	r8, sp, #328	; 0x148
    int col;
    const unsigned char (*dino_bitmap)[16];
    if (is_jumping != 0) {
        dino_bitmap = dino1; // Usa sprite padrão durante o pulo
    } else {
        if ((frame / 10) % 2 == 0) {
     ee0:	0a000001 	beq	eec <draw_dino+0xac>
     ee4:	eaffffff 	b	ee8 <draw_dino+0xa8>
            dino_bitmap = dino1;
        } else {
            dino_bitmap = dino2;
     ee8:	e28d8008 	add	r8, sp, #8
        }
    }

    for (row = 0; row < 20; row++) {
     eec:	e3a07000 	mov	r7, #0
        for (col = 0; col < 16; col++) {
            if (dino_bitmap[row][col] == 1) {
                int x1 = x + col;
                int y1 = y + row;
                video_box(x1, y1, x1, y1, color);
     ef0:	e6bfa07a 	sxth	r10, r10
     ef4:	ea00000f 	b	f38 <draw_dino+0xf8>
        }
    }

    for (row = 0; row < 20; row++) {
        for (col = 0; col < 16; col++) {
            if (dino_bitmap[row][col] == 1) {
     ef8:	e7d53004 	ldrb	r3, [r5, r4]
     efc:	e3530001 	cmp	r3, #1
     f00:	1a000005 	bne	f1c <draw_dino+0xdc>
    short bg_color = night_mode ? resample_rgb(db, 0x0010) : resample_rgb(db, BLACK); // Azul escuro à noite
    video_box(0, 0, STANDARD_X, STANDARD_Y, bg_color);
}


void draw_dino(int x, int y, int frame, int is_jumping) {
     f04:	e0842009 	add	r2, r4, r9
    for (row = 0; row < 20; row++) {
        for (col = 0; col < 16; col++) {
            if (dino_bitmap[row][col] == 1) {
                int x1 = x + col;
                int y1 = y + row;
                video_box(x1, y1, x1, y1, color);
     f08:	e58da000 	str	r10, [sp]
     f0c:	e1a00002 	mov	r0, r2
     f10:	e1a01006 	mov	r1, r6
     f14:	e1a03006 	mov	r3, r6
     f18:	ebfffd55 	bl	474 <video_box>
            dino_bitmap = dino2;
        }
    }

    for (row = 0; row < 20; row++) {
        for (col = 0; col < 16; col++) {
     f1c:	e2844001 	add	r4, r4, #1
     f20:	e3540010 	cmp	r4, #16
     f24:	1afffff3 	bne	ef8 <draw_dino+0xb8>
        } else {
            dino_bitmap = dino2;
        }
    }

    for (row = 0; row < 20; row++) {
     f28:	e2877001 	add	r7, r7, #1
     f2c:	e2888010 	add	r8, r8, #16
     f30:	e3570014 	cmp	r7, #20
     f34:	0a000003 	beq	f48 <draw_dino+0x108>
        for (col = 0; col < 16; col++) {
            if (dino_bitmap[row][col] == 1) {
     f38:	e1a05008 	mov	r5, r8
     f3c:	e3a04000 	mov	r4, #0
    short bg_color = night_mode ? resample_rgb(db, 0x0010) : resample_rgb(db, BLACK); // Azul escuro à noite
    video_box(0, 0, STANDARD_X, STANDARD_Y, bg_color);
}


void draw_dino(int x, int y, int frame, int is_jumping) {
     f40:	e087600b 	add	r6, r7, r11
     f44:	eaffffeb 	b	ef8 <draw_dino+0xb8>
                int y1 = y + row;
                video_box(x1, y1, x1, y1, color);
            }
        }
    }
}
     f48:	e28ddfa3 	add	sp, sp, #652	; 0x28c
     f4c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

00000f50 <clear_screen>:
        }
    }
}


void clear_screen(void) {
     f50:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     f54:	e24dd00c 	sub	sp, sp, #12
    short bg_color = night_mode ? resample_rgb(db, 0x0010) : resample_rgb(db, BLACK); // Azul escuro à noite
     f58:	e3023c94 	movw	r3, #11412	; 0x2c94
     f5c:	e3403000 	movt	r3, #0
     f60:	e593300c 	ldr	r3, [r3, #12]
     f64:	e3530000 	cmp	r3, #0
     f68:	e3023c94 	movw	r3, #11412	; 0x2c94
     f6c:	e3403000 	movt	r3, #0
     f70:	e5930008 	ldr	r0, [r3, #8]
     f74:	13a01010 	movne	r1, #16
     f78:	03a01000 	moveq	r1, #0
     f7c:	ebfffd71 	bl	548 <resample_rgb>
     f80:	e6ff0070 	uxth	r0, r0
    video_box(0, 0, STANDARD_X, STANDARD_Y, bg_color);
     f84:	e6bf0070 	sxth	r0, r0
     f88:	e58d0000 	str	r0, [sp]
     f8c:	e3a00000 	mov	r0, #0
     f90:	e1a01000 	mov	r1, r0
     f94:	e3a02d05 	mov	r2, #320	; 0x140
     f98:	e3a030f0 	mov	r3, #240	; 0xf0
     f9c:	ebfffd34 	bl	474 <video_box>
}
     fa0:	e28dd00c 	add	sp, sp, #12
     fa4:	e8bd8000 	ldmfd	sp!, {pc}

00000fa8 <draw_logo>:

};



void draw_logo(int x, int y) {
     fa8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     fac:	e24dd01c 	sub	sp, sp, #28
     fb0:	e58d0014 	str	r0, [sp, #20]
     fb4:	e1a0b001 	mov	r11, r1
    short color = resample_rgb(db, PINK);
     fb8:	e3023c94 	movw	r3, #11412	; 0x2c94
     fbc:	e3403000 	movt	r3, #0
     fc0:	e5930008 	ldr	r0, [r3, #8]
     fc4:	e30f16b6 	movw	r1, #63158	; 0xf6b6
     fc8:	ebfffd5e 	bl	548 <resample_rgb>
     fcc:	e59f20ac 	ldr	r2, [pc, #172]	; 1080 <draw_logo+0xd8>
     fd0:	e58d200c 	str	r2, [sp, #12]

};



void draw_logo(int x, int y) {
     fd4:	e2823b01 	add	r3, r2, #1024	; 0x400
     fd8:	e58d3010 	str	r3, [sp, #16]
     fdc:	e3a09000 	mov	r9, #0
                // Desenha um quadrado de tamanho LOGO_SCALE x LOGO_SCALE
                for (dy = 0; dy < LOGO_SCALE; dy++) {
                    for (dx = 0; dx < LOGO_SCALE; dx++) {
                        int x1 = x + col * LOGO_SCALE + dx;
                        int y1 = y + row * LOGO_SCALE + dy;
                        video_box(x1, y1, x1, y1, color);
     fe0:	e6bf8070 	sxth	r8, r0
     fe4:	ea000020 	b	106c <draw_logo+0xc4>
void draw_logo(int x, int y) {
    short color = resample_rgb(db, PINK);
    int row, col, dx, dy;
    for (row = 0; row < LOGO_HEIGHT; row++) {
        for (col = 0; col < LOGO_WIDTH; col++) {
            if (logo_bitmap[row][col] == 1) {
     fe8:	e59d200c 	ldr	r2, [sp, #12]
     fec:	e7d2300a 	ldrb	r3, [r2, r10]
     ff0:	e3530001 	cmp	r3, #1
     ff4:	1a000011 	bne	1040 <draw_logo+0x98>
     ff8:	ea00000c 	b	1030 <draw_logo+0x88>

};



void draw_logo(int x, int y) {
     ffc:	e0862004 	add	r2, r6, r4
                // Desenha um quadrado de tamanho LOGO_SCALE x LOGO_SCALE
                for (dy = 0; dy < LOGO_SCALE; dy++) {
                    for (dx = 0; dx < LOGO_SCALE; dx++) {
                        int x1 = x + col * LOGO_SCALE + dx;
                        int y1 = y + row * LOGO_SCALE + dy;
                        video_box(x1, y1, x1, y1, color);
    1000:	e58d8000 	str	r8, [sp]
    1004:	e1a00002 	mov	r0, r2
    1008:	e1a01005 	mov	r1, r5
    100c:	e1a03005 	mov	r3, r5
    1010:	ebfffd17 	bl	474 <video_box>
    for (row = 0; row < LOGO_HEIGHT; row++) {
        for (col = 0; col < LOGO_WIDTH; col++) {
            if (logo_bitmap[row][col] == 1) {
                // Desenha um quadrado de tamanho LOGO_SCALE x LOGO_SCALE
                for (dy = 0; dy < LOGO_SCALE; dy++) {
                    for (dx = 0; dx < LOGO_SCALE; dx++) {
    1014:	e2844001 	add	r4, r4, #1
    1018:	e3540004 	cmp	r4, #4
    101c:	1afffff6 	bne	ffc <draw_logo+0x54>
    int row, col, dx, dy;
    for (row = 0; row < LOGO_HEIGHT; row++) {
        for (col = 0; col < LOGO_WIDTH; col++) {
            if (logo_bitmap[row][col] == 1) {
                // Desenha um quadrado de tamanho LOGO_SCALE x LOGO_SCALE
                for (dy = 0; dy < LOGO_SCALE; dy++) {
    1020:	e2877001 	add	r7, r7, #1
    1024:	e3570004 	cmp	r7, #4
    1028:	1a000001 	bne	1034 <draw_logo+0x8c>
    102c:	ea000003 	b	1040 <draw_logo+0x98>
void draw_logo(int x, int y) {
    short color = resample_rgb(db, PINK);
    int row, col, dx, dy;
    for (row = 0; row < LOGO_HEIGHT; row++) {
        for (col = 0; col < LOGO_WIDTH; col++) {
            if (logo_bitmap[row][col] == 1) {
    1030:	e1a07009 	mov	r7, r9

};



void draw_logo(int x, int y) {
    1034:	e087500b 	add	r5, r7, r11
    1038:	e1a04009 	mov	r4, r9
    103c:	eaffffee 	b	ffc <draw_logo+0x54>
    short color = resample_rgb(db, PINK);
    int row, col, dx, dy;
    for (row = 0; row < LOGO_HEIGHT; row++) {
        for (col = 0; col < LOGO_WIDTH; col++) {
    1040:	e28aa001 	add	r10, r10, #1
    1044:	e2866004 	add	r6, r6, #4
    1048:	e35a0020 	cmp	r10, #32
    104c:	1affffe5 	bne	fe8 <draw_logo+0x40>
    1050:	e59d300c 	ldr	r3, [sp, #12]
    1054:	e2833020 	add	r3, r3, #32
    1058:	e58d300c 	str	r3, [sp, #12]
    105c:	e28bb004 	add	r11, r11, #4


void draw_logo(int x, int y) {
    short color = resample_rgb(db, PINK);
    int row, col, dx, dy;
    for (row = 0; row < LOGO_HEIGHT; row++) {
    1060:	e59d2010 	ldr	r2, [sp, #16]
    1064:	e1530002 	cmp	r3, r2
    1068:	0a000002 	beq	1078 <draw_logo+0xd0>
    106c:	e59d6014 	ldr	r6, [sp, #20]

};



void draw_logo(int x, int y) {
    1070:	e1a0a009 	mov	r10, r9
    1074:	eaffffdb 	b	fe8 <draw_logo+0x40>
                    }
                }
            }
        }
    }
}
    1078:	e28dd01c 	add	sp, sp, #28
    107c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
    1080:	00002364 	.word	0x00002364

00001084 <get_data_bits>:
    return color; // desativa o processamento errado
}


int get_data_bits(int mode) {
    switch (mode) {
    1084:	e3500039 	cmp	r0, #57	; 0x39
    1088:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
    108c:	ea00004b 	b	11c0 <get_data_bits+0x13c>
    1090:	00001178 	.word	0x00001178
    1094:	000011c0 	.word	0x000011c0
    1098:	000011c0 	.word	0x000011c0
    109c:	000011c0 	.word	0x000011c0
    10a0:	000011c0 	.word	0x000011c0
    10a4:	000011c0 	.word	0x000011c0
    10a8:	000011c0 	.word	0x000011c0
    10ac:	000011c8 	.word	0x000011c8
    10b0:	000011c0 	.word	0x000011c0
    10b4:	000011c0 	.word	0x000011c0
    10b8:	000011c0 	.word	0x000011c0
    10bc:	000011c0 	.word	0x000011c0
    10c0:	000011c0 	.word	0x000011c0
    10c4:	000011c0 	.word	0x000011c0
    10c8:	000011c0 	.word	0x000011c0
    10cc:	000011c0 	.word	0x000011c0
    10d0:	000011c0 	.word	0x000011c0
    10d4:	000011c8 	.word	0x000011c8
    10d8:	00001180 	.word	0x00001180
    10dc:	000011c0 	.word	0x000011c0
    10e0:	00001188 	.word	0x00001188
    10e4:	000011c0 	.word	0x000011c0
    10e8:	000011c0 	.word	0x000011c0
    10ec:	00001190 	.word	0x00001190
    10f0:	000011c0 	.word	0x000011c0
    10f4:	00001198 	.word	0x00001198
    10f8:	000011c0 	.word	0x000011c0
    10fc:	000011c0 	.word	0x000011c0
    1100:	000011c0 	.word	0x000011c0
    1104:	000011c0 	.word	0x000011c0
    1108:	000011c0 	.word	0x000011c0
    110c:	000011c0 	.word	0x000011c0
    1110:	000011c0 	.word	0x000011c0
    1114:	000011c0 	.word	0x000011c0
    1118:	000011c0 	.word	0x000011c0
    111c:	000011c0 	.word	0x000011c0
    1120:	000011c0 	.word	0x000011c0
    1124:	000011c0 	.word	0x000011c0
    1128:	000011c0 	.word	0x000011c0
    112c:	000011c0 	.word	0x000011c0
    1130:	000011c0 	.word	0x000011c0
    1134:	000011c0 	.word	0x000011c0
    1138:	000011c0 	.word	0x000011c0
    113c:	000011c0 	.word	0x000011c0
    1140:	000011c0 	.word	0x000011c0
    1144:	000011c0 	.word	0x000011c0
    1148:	000011c0 	.word	0x000011c0
    114c:	000011c0 	.word	0x000011c0
    1150:	000011c0 	.word	0x000011c0
    1154:	000011c8 	.word	0x000011c8
    1158:	000011a0 	.word	0x000011a0
    115c:	000011a8 	.word	0x000011a8
    1160:	000011c0 	.word	0x000011c0
    1164:	000011c0 	.word	0x000011c0
    1168:	000011c0 	.word	0x000011c0
    116c:	000011b0 	.word	0x000011b0
    1170:	000011c0 	.word	0x000011c0
    1174:	000011b8 	.word	0x000011b8
    case 0x0:
        return 1;
    1178:	e3a00001 	mov	r0, #1
    117c:	e12fff1e 	bx	lr
    case 0x7:
        return 8;
    case 0x11:
        return 8;
    case 0x12:
        return 9;
    1180:	e3a00009 	mov	r0, #9
    1184:	e12fff1e 	bx	lr
    case 0x14:
        return 16;
    1188:	e3a00010 	mov	r0, #16
    118c:	e12fff1e 	bx	lr
    case 0x17:
        return 24;
    1190:	e3a00018 	mov	r0, #24
    1194:	e12fff1e 	bx	lr
    case 0x19:
        return 30;
    1198:	e3a0001e 	mov	r0, #30
    119c:	e12fff1e 	bx	lr
    case 0x31:
        return 8;
    case 0x32:
        return 12;
    11a0:	e3a0000c 	mov	r0, #12
    11a4:	e12fff1e 	bx	lr
    case 0x33:
        return 16;
    11a8:	e3a00010 	mov	r0, #16
    11ac:	e12fff1e 	bx	lr
    case 0x37:
        return 32;
    11b0:	e3a00020 	mov	r0, #32
    11b4:	e12fff1e 	bx	lr
    case 0x39:
        return 40;
    11b8:	e3a00028 	mov	r0, #40	; 0x28
    11bc:	e12fff1e 	bx	lr
    default:
        return 16;
    11c0:	e3a00010 	mov	r0, #16
    11c4:	e12fff1e 	bx	lr
int get_data_bits(int mode) {
    switch (mode) {
    case 0x0:
        return 1;
    case 0x7:
        return 8;
    11c8:	e3a00008 	mov	r0, #8
    case 0x39:
        return 40;
    default:
        return 16;
    }
    11cc:	e12fff1e 	bx	lr

000011d0 <main>:





int main(void) {
    11d0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    11d4:	e24dd034 	sub	sp, sp, #52	; 0x34
    volatile int * video_resolution = (int *)(PIXEL_BUF_CTRL_BASE + 0x8);
    screen_x = *video_resolution & 0xFFFF;
    11d8:	e3033fff 	movw	r3, #16383	; 0x3fff
    11dc:	e34f3f20 	movt	r3, #65312	; 0xff20
    11e0:	e5135fd7 	ldr	r5, [r3, #-4055]	; 0xfffff029
    11e4:	e6ff5075 	uxth	r5, r5
    11e8:	e3024c94 	movw	r4, #11412	; 0x2c94
    11ec:	e3404000 	movt	r4, #0
    11f0:	e5845010 	str	r5, [r4, #16]
    screen_y = (*video_resolution >> 16) & 0xFFFF;
    11f4:	e5132fd7 	ldr	r2, [r3, #-4055]	; 0xfffff029
    11f8:	e1a02822 	lsr	r2, r2, #16
    11fc:	e5842014 	str	r2, [r4, #20]

    volatile int * rgb_status = (int *)(RGB_RESAMPLER_BASE);
    db = get_data_bits(*rgb_status & 0x3F);
    1200:	e5130fef 	ldr	r0, [r3, #-4079]	; 0xfffff011
    1204:	e200003f 	and	r0, r0, #63	; 0x3f
    1208:	ebffff9d 	bl	1084 <get_data_bits>
    120c:	e5840008 	str	r0, [r4, #8]

    res_offset = (screen_x == 160) ? 1 : 0;
    1210:	e35500a0 	cmp	r5, #160	; 0xa0
    1214:	13a05000 	movne	r5, #0
    1218:	03a05001 	moveq	r5, #1
    121c:	e5845000 	str	r5, [r4]
    col_offset = (db == 8) ? 1 : 0;
    1220:	e3500008 	cmp	r0, #8
    1224:	13a00000 	movne	r0, #0
    1228:	03a00001 	moveq	r0, #1
    122c:	e5840004 	str	r0, [r4, #4]
    srand(42);
    1230:	e3a0002a 	mov	r0, #42	; 0x2a
    1234:	eb00028e 	bl	1c74 <srand>
        short box_color, text_color;
        int box_x1, box_y1, box_x2, box_y2;
        char score_text[30];
        int temp_score, i, start, end;

        dino_x = 30;
    1238:	e3024820 	movw	r4, #10272	; 0x2820
    123c:	e3404000 	movt	r4, #0
    1240:	e3a0001e 	mov	r0, #30
    1244:	e58d000c 	str	r0, [sp, #12]
        dino_y = GROUND_Y - DINO_HEIGHT;
        dino_jump_state = 0;
    1248:	e3025c94 	movw	r5, #11412	; 0x2c94
    124c:	e3405000 	movt	r5, #0
    1250:	e3a01000 	mov	r1, #0
    1254:	e58d1008 	str	r1, [sp, #8]
                if (jump_counter >= 10) {
                    dino_jump_state = 2;
                }
            } else if (dino_jump_state == 2) {
                jump_counter--;
                dino_y = (GROUND_Y - DINO_HEIGHT) - (JUMP_HEIGHT * jump_counter / 10);
    1258:	e306b667 	movw	r11, #26215	; 0x6667
    125c:	e346b666 	movt	r11, #26214	; 0x6666
        short box_color, text_color;
        int box_x1, box_y1, box_x2, box_y2;
        char score_text[30];
        int temp_score, i, start, end;

        dino_x = 30;
    1260:	e59d200c 	ldr	r2, [sp, #12]
    1264:	e5842000 	str	r2, [r4]
        dino_y = GROUND_Y - DINO_HEIGHT;
    1268:	e3a060b4 	mov	r6, #180	; 0xb4
    126c:	e5846004 	str	r6, [r4, #4]
        dino_jump_state = 0;
    1270:	e59d3008 	ldr	r3, [sp, #8]
    1274:	e5853018 	str	r3, [r5, #24]
        jump_counter = 0;
    1278:	e585301c 	str	r3, [r5, #28]
        obstacle_x = STANDARD_X;
    127c:	e3a03d05 	mov	r3, #320	; 0x140
    1280:	e5843008 	str	r3, [r4, #8]
        obstacle_x2 = STANDARD_X + random_range(50, 150);
    1284:	e3a00032 	mov	r0, #50	; 0x32
    1288:	e3a01096 	mov	r1, #150	; 0x96
    128c:	ebfffc23 	bl	320 <random_range>
    1290:	e2800d05 	add	r0, r0, #320	; 0x140
    1294:	e584000c 	str	r0, [r4, #12]
        obstacle_y = GROUND_Y - OBSTACLE_HEIGHT;
    1298:	e5846010 	str	r6, [r4, #16]
        bird_x = STANDARD_X + 100;   // Inicia bem fora da tela, à direita
    129c:	e3a03f69 	mov	r3, #420	; 0x1a4
    12a0:	e5843014 	str	r3, [r4, #20]
        bird_y = 160;                // Altura fixa para voo
    12a4:	e3a030a0 	mov	r3, #160	; 0xa0
    12a8:	e5843018 	str	r3, [r4, #24]
        score = 0;
    12ac:	e3a00000 	mov	r0, #0
    12b0:	e5850020 	str	r0, [r5, #32]
        game_over = 0;
    12b4:	e5850024 	str	r0, [r5, #36]	; 0x24
        frame_counter = 0;
    12b8:	e5850028 	str	r0, [r5, #40]	; 0x28
        current_speed = GAME_SPEED;
    12bc:	e3a03004 	mov	r3, #4
    12c0:	e584301c 	str	r3, [r4, #28]

        clear_screen();
    12c4:	ebffff21 	bl	f50 <clear_screen>
        
        clear_text();
    12c8:	ebfffbe3 	bl	25c <clear_text>
        char *title = "Carol Dino Game";
        int x_pos = (80 - strlen(title)) / 2;

        video_text(23, 6, "T H E   D I N O S A U R   G A M E");
    12cc:	e3a00017 	mov	r0, #23
    12d0:	e3a01006 	mov	r1, #6
    12d4:	e3022764 	movw	r2, #10084	; 0x2764
    12d8:	e3402000 	movt	r2, #0
    12dc:	ebfffc18 	bl	344 <video_text>
        draw_logo(96, 60);
    12e0:	e3a00060 	mov	r0, #96	; 0x60
    12e4:	e3a0103c 	mov	r1, #60	; 0x3c
    12e8:	ebffff2e 	bl	fa8 <draw_logo>




        
        while ((*key_ptr & 0x2) != 0);
    12ec:	e3a02000 	mov	r2, #0
    12f0:	e34f2f20 	movt	r2, #65312	; 0xff20
    12f4:	e5923050 	ldr	r3, [r2, #80]	; 0x50
    12f8:	e3130002 	tst	r3, #2
    12fc:	1afffffc 	bne	12f4 <main+0x124>
        delay(1000);
    1300:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    1304:	ebfffbf7 	bl	2e8 <delay>
        while ((*key_ptr & 0x2) == 0);
    1308:	e3a02000 	mov	r2, #0
    130c:	e34f2f20 	movt	r2, #65312	; 0xff20
    1310:	e5923050 	ldr	r3, [r2, #80]	; 0x50
    1314:	e3130002 	tst	r3, #2
    1318:	0afffffc 	beq	1310 <main+0x140>
    131c:	ea0000b0 	b	15e4 <main+0x414>
        
        while (!game_over) {
            clear_screen();
    1320:	ebffff0a 	bl	f50 <clear_screen>

            if (!night_mode) {
    1324:	e595300c 	ldr	r3, [r5, #12]
    1328:	e3530000 	cmp	r3, #0
    132c:	1a00000c 	bne	1364 <main+0x194>
                draw_sun(10, 10);
    1330:	e3a0000a 	mov	r0, #10
    1334:	e1a01000 	mov	r1, r0
    1338:	ebfffcc1 	bl	644 <draw_sun>
                draw_cloud(60, 30);
    133c:	e3a0003c 	mov	r0, #60	; 0x3c
    1340:	e3a0101e 	mov	r1, #30
    1344:	ebfffcea 	bl	6f4 <draw_cloud>
                draw_cloud(160, 20);
    1348:	e3a000a0 	mov	r0, #160	; 0xa0
    134c:	e3a01014 	mov	r1, #20
    1350:	ebfffce7 	bl	6f4 <draw_cloud>
                draw_cloud(240, 35);
    1354:	e3a000f0 	mov	r0, #240	; 0xf0
    1358:	e3a01023 	mov	r1, #35	; 0x23
    135c:	ebfffce4 	bl	6f4 <draw_cloud>
    1360:	ea000003 	b	1374 <main+0x1a4>
            } else {
                draw_moon(10, 10);
    1364:	e3a0000a 	mov	r0, #10
    1368:	e1a01000 	mov	r1, r0
    136c:	ebfffc94 	bl	5c4 <draw_moon>
                draw_stars();
    1370:	ebfffc76 	bl	550 <draw_stars>
            }



            // Controle de pulo
            if ((*key_ptr & 0x1) != 0 && dino_jump_state == 0) {
    1374:	e5993050 	ldr	r3, [r9, #80]	; 0x50
    1378:	e3130001 	tst	r3, #1
    137c:	0a000005 	beq	1398 <main+0x1c8>
    1380:	e5953018 	ldr	r3, [r5, #24]
    1384:	e3530000 	cmp	r3, #0
                dino_jump_state = 1;
    1388:	03a03001 	moveq	r3, #1
    138c:	05853018 	streq	r3, [r5, #24]
                jump_counter = 0;
    1390:	03a01000 	moveq	r1, #0
    1394:	0585101c 	streq	r1, [r5, #28]
            }

            if (dino_jump_state == 1) {
    1398:	e5953018 	ldr	r3, [r5, #24]
    139c:	e3530001 	cmp	r3, #1
    13a0:	1a00000d 	bne	13dc <main+0x20c>
                jump_counter++;
    13a4:	e595301c 	ldr	r3, [r5, #28]
    13a8:	e2833001 	add	r3, r3, #1
    13ac:	e585301c 	str	r3, [r5, #28]
                dino_y = (GROUND_Y - DINO_HEIGHT) - (JUMP_HEIGHT * jump_counter / 10);
    13b0:	e0832103 	add	r2, r3, r3, lsl #2
    13b4:	e1a02182 	lsl	r2, r2, #3
    13b8:	e0c1029b 	smull	r0, r1, r11, r2
    13bc:	e1a02fc2 	asr	r2, r2, #31
    13c0:	e0622141 	rsb	r2, r2, r1, asr #2
    13c4:	e26220b4 	rsb	r2, r2, #180	; 0xb4
    13c8:	e5842004 	str	r2, [r4, #4]
                if (jump_counter >= 10) {
    13cc:	e3530009 	cmp	r3, #9
                    dino_jump_state = 2;
    13d0:	c3a03002 	movgt	r3, #2
    13d4:	c5853018 	strgt	r3, [r5, #24]
    13d8:	ea000010 	b	1420 <main+0x250>
                }
            } else if (dino_jump_state == 2) {
    13dc:	e3530002 	cmp	r3, #2
    13e0:	1a00000e 	bne	1420 <main+0x250>
                jump_counter--;
    13e4:	e595301c 	ldr	r3, [r5, #28]
    13e8:	e2433001 	sub	r3, r3, #1
    13ec:	e585301c 	str	r3, [r5, #28]
                dino_y = (GROUND_Y - DINO_HEIGHT) - (JUMP_HEIGHT * jump_counter / 10);
    13f0:	e0832103 	add	r2, r3, r3, lsl #2
    13f4:	e1a02182 	lsl	r2, r2, #3
    13f8:	e0c1029b 	smull	r0, r1, r11, r2
    13fc:	e1a02fc2 	asr	r2, r2, #31
    1400:	e0622141 	rsb	r2, r2, r1, asr #2
    1404:	e26220b4 	rsb	r2, r2, #180	; 0xb4
    1408:	e5842004 	str	r2, [r4, #4]
                if (jump_counter <= 0) {
    140c:	e3530000 	cmp	r3, #0
                    dino_jump_state = 0;
    1410:	d3a01000 	movle	r1, #0
    1414:	d5851018 	strle	r1, [r5, #24]
                    dino_y = GROUND_Y - DINO_HEIGHT;
    1418:	d3a030b4 	movle	r3, #180	; 0xb4
    141c:	d5843004 	strle	r3, [r4, #4]
                }
            }

            // Obstáculo terrestre
            obstacle_x -= current_speed;
    1420:	e594201c 	ldr	r2, [r4, #28]
    1424:	e5943008 	ldr	r3, [r4, #8]
    1428:	e0623003 	rsb	r3, r2, r3
    142c:	e5843008 	str	r3, [r4, #8]
            obstacle_x2 -= current_speed;
    1430:	e594100c 	ldr	r1, [r4, #12]
    1434:	e0622001 	rsb	r2, r2, r1
    1438:	e584200c 	str	r2, [r4, #12]
            current_speed = GAME_SPEED + (score / 50);
    143c:	e5952020 	ldr	r2, [r5, #32]
    1440:	e0c1029a 	smull	r0, r1, r10, r2
    1444:	e1a02fc2 	asr	r2, r2, #31
    1448:	e0622241 	rsb	r2, r2, r1, asr #4
    144c:	e2822004 	add	r2, r2, #4
    1450:	e584201c 	str	r2, [r4, #28]

            if (obstacle_x < -OBSTACLE_WIDTH)
    1454:	e3730008 	cmn	r3, #8
    1458:	aa000004 	bge	1470 <main+0x2a0>
                obstacle_x = STANDARD_X + random_range(50, 150);
    145c:	e3a00032 	mov	r0, #50	; 0x32
    1460:	e3a01096 	mov	r1, #150	; 0x96
    1464:	ebfffbad 	bl	320 <random_range>
    1468:	e2800d05 	add	r0, r0, #320	; 0x140
    146c:	e5840008 	str	r0, [r4, #8]

            if (obstacle_x2 < -OBSTACLE_WIDTH)
    1470:	e594300c 	ldr	r3, [r4, #12]
    1474:	e3730008 	cmn	r3, #8
    1478:	aa000004 	bge	1490 <main+0x2c0>
                obstacle_x2 = STANDARD_X + random_range(50, 150);
    147c:	e3a00032 	mov	r0, #50	; 0x32
    1480:	e3a01096 	mov	r1, #150	; 0x96
    1484:	ebfffba5 	bl	320 <random_range>
    1488:	e2800d05 	add	r0, r0, #320	; 0x140
    148c:	e584000c 	str	r0, [r4, #12]

            // Movimento e colisão do passarinho
            if (score >= 50) {
    1490:	e5953020 	ldr	r3, [r5, #32]
    1494:	e3530031 	cmp	r3, #49	; 0x31
    1498:	da00001a 	ble	1508 <main+0x338>
                bird_x -= current_speed;
    149c:	e5942014 	ldr	r2, [r4, #20]
    14a0:	e594301c 	ldr	r3, [r4, #28]
    14a4:	e0633002 	rsb	r3, r3, r2
    14a8:	e5843014 	str	r3, [r4, #20]

                if (bird_x < -BIRD_WIDTH) {
    14ac:	e373000c 	cmn	r3, #12
    14b0:	aa000006 	bge	14d0 <main+0x300>
                    bird_x = STANDARD_X + random_range(50, 200);
    14b4:	e3a00032 	mov	r0, #50	; 0x32
    14b8:	e3a010c8 	mov	r1, #200	; 0xc8
    14bc:	ebfffb97 	bl	320 <random_range>
    14c0:	e2800d05 	add	r0, r0, #320	; 0x140
    14c4:	e5840014 	str	r0, [r4, #20]
                    bird_y = 160; 
    14c8:	e3a030a0 	mov	r3, #160	; 0xa0
    14cc:	e5843018 	str	r3, [r4, #24]
                }

                if (check_collision(dino_x, dino_y, bird_x, bird_y)) {
    14d0:	e5947014 	ldr	r7, [r4, #20]
    14d4:	e5946018 	ldr	r6, [r4, #24]
    14d8:	e5940000 	ldr	r0, [r4]
    14dc:	e5941004 	ldr	r1, [r4, #4]
    14e0:	e1a02007 	mov	r2, r7
    14e4:	e1a03006 	mov	r3, r6
    14e8:	ebfffb6a 	bl	298 <check_collision>
    14ec:	e3500000 	cmp	r0, #0
                    game_over = 1;
    14f0:	13a03001 	movne	r3, #1
    14f4:	15853024 	strne	r3, [r5, #36]	; 0x24
                }

                draw_bird(bird_x, bird_y, frame_counter);
    14f8:	e1a00007 	mov	r0, r7
    14fc:	e1a01006 	mov	r1, r6
    1500:	e5952028 	ldr	r2, [r5, #40]	; 0x28
    1504:	ebfffd28 	bl	9ac <draw_bird>
            }

            // Colisão com obstáculos terrestres
            if (check_collision(dino_x, dino_y, obstacle_x, obstacle_y) ||
    1508:	e5948000 	ldr	r8, [r4]
    150c:	e5947004 	ldr	r7, [r4, #4]
    1510:	e5946010 	ldr	r6, [r4, #16]
    1514:	e1a00008 	mov	r0, r8
    1518:	e1a01007 	mov	r1, r7
    151c:	e5942008 	ldr	r2, [r4, #8]
    1520:	e1a03006 	mov	r3, r6
    1524:	ebfffb5b 	bl	298 <check_collision>
    1528:	e3500000 	cmp	r0, #0
    152c:	1a000006 	bne	154c <main+0x37c>
                check_collision(dino_x, dino_y, obstacle_x2, obstacle_y)) {
    1530:	e1a00008 	mov	r0, r8
    1534:	e1a01007 	mov	r1, r7
    1538:	e594200c 	ldr	r2, [r4, #12]
    153c:	e1a03006 	mov	r3, r6
    1540:	ebfffb54 	bl	298 <check_collision>

                draw_bird(bird_x, bird_y, frame_counter);
            }

            // Colisão com obstáculos terrestres
            if (check_collision(dino_x, dino_y, obstacle_x, obstacle_y) ||
    1544:	e3500000 	cmp	r0, #0
    1548:	0a000001 	beq	1554 <main+0x384>
                check_collision(dino_x, dino_y, obstacle_x2, obstacle_y)) {
                game_over = 1;
    154c:	e3a03001 	mov	r3, #1
    1550:	e5853024 	str	r3, [r5, #36]	; 0x24
            }

            draw_ground();
    1554:	ebfffc85 	bl	770 <draw_ground>
            draw_dino(dino_x, dino_y, frame_counter,dino_jump_state);
    1558:	e5940000 	ldr	r0, [r4]
    155c:	e5941004 	ldr	r1, [r4, #4]
    1560:	e5952028 	ldr	r2, [r5, #40]	; 0x28
    1564:	e5953018 	ldr	r3, [r5, #24]
    1568:	ebfffe34 	bl	e40 <draw_dino>
            draw_obstacle(obstacle_x, obstacle_y);
    156c:	e5940008 	ldr	r0, [r4, #8]
    1570:	e5941010 	ldr	r1, [r4, #16]
    1574:	ebfffdba 	bl	c64 <draw_obstacle>
            draw_obstacle(obstacle_x2, obstacle_y);
    1578:	e594000c 	ldr	r0, [r4, #12]
    157c:	e5941010 	ldr	r1, [r4, #16]
    1580:	ebfffdb7 	bl	c64 <draw_obstacle>
            draw_score(score);
    1584:	e5950020 	ldr	r0, [r5, #32]
    1588:	ebfffb79 	bl	374 <draw_score>

            delay(5000);
    158c:	e3010388 	movw	r0, #5000	; 0x1388
    1590:	ebfffb54 	bl	2e8 <delay>
            frame_counter++;
    1594:	e5953028 	ldr	r3, [r5, #40]	; 0x28
    1598:	e2833001 	add	r3, r3, #1
    159c:	e5853028 	str	r3, [r5, #40]	; 0x28
            night_mode = (score / 50) % 2;
    15a0:	e5952020 	ldr	r2, [r5, #32]
    15a4:	e0c0129a 	smull	r1, r0, r10, r2
    15a8:	e1a01fc2 	asr	r1, r2, #31
    15ac:	e0610240 	rsb	r0, r1, r0, asr #4
    15b0:	e1a01fa0 	lsr	r1, r0, #31
    15b4:	e0800001 	add	r0, r0, r1
    15b8:	e2000001 	and	r0, r0, #1
    15bc:	e0611000 	rsb	r1, r1, r0
    15c0:	e585100c 	str	r1, [r5, #12]
            if (frame_counter % 5 == 0) score++;
    15c4:	e0c0139b 	smull	r1, r0, r11, r3
    15c8:	e1a01fc3 	asr	r1, r3, #31
    15cc:	e06110c0 	rsb	r1, r1, r0, asr #1
    15d0:	e0811101 	add	r1, r1, r1, lsl #2
    15d4:	e1530001 	cmp	r3, r1
    15d8:	02822001 	addeq	r2, r2, #1
    15dc:	05852020 	streq	r2, [r5, #32]
    15e0:	ea000003 	b	15f4 <main+0x424>
            }



            // Controle de pulo
            if ((*key_ptr & 0x1) != 0 && dino_jump_state == 0) {
    15e4:	e3a09000 	mov	r9, #0
    15e8:	e34f9f20 	movt	r9, #65312	; 0xff20
            }

            // Obstáculo terrestre
            obstacle_x -= current_speed;
            obstacle_x2 -= current_speed;
            current_speed = GAME_SPEED + (score / 50);
    15ec:	e308a51f 	movw	r10, #34079	; 0x851f
    15f0:	e345a1eb 	movt	r10, #20971	; 0x51eb
        
        while ((*key_ptr & 0x2) != 0);
        delay(1000);
        while ((*key_ptr & 0x2) == 0);
        
        while (!game_over) {
    15f4:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    15f8:	e3530000 	cmp	r3, #0
    15fc:	0affff47 	beq	1320 <main+0x150>
            night_mode = (score / 50) % 2;
            if (frame_counter % 5 == 0) score++;
        }

        
        clear_screen();
    1600:	ebfffe52 	bl	f50 <clear_screen>
        clear_text();
    1604:	ebfffb14 	bl	25c <clear_text>

        
        // Caixa central marrom escura
        box_color = resample_rgb(db, 0x4208); // marrom escuro
    1608:	e5950008 	ldr	r0, [r5, #8]
    160c:	e3041208 	movw	r1, #16904	; 0x4208
    1610:	ebfffbcc 	bl	548 <resample_rgb>

        box_y1 = 30;  // antes 70
        box_y2 = 170;


        video_box(box_x1, box_y1, box_x2, box_y2, box_color);
    1614:	e6bf0070 	sxth	r0, r0
    1618:	e58d0000 	str	r0, [sp]
    161c:	e3a0003c 	mov	r0, #60	; 0x3c
    1620:	e3a0101e 	mov	r1, #30
    1624:	e3a02f41 	mov	r2, #260	; 0x104
    1628:	e3a030aa 	mov	r3, #170	; 0xaa
    162c:	ebfffb90 	bl	474 <video_box>

        // Texto "GAME OVER!" centralizado
        video_text(31, 12, " G A M E   O V E R !");
    1630:	e3a0001f 	mov	r0, #31
    1634:	e3a0100c 	mov	r1, #12
    1638:	e3022788 	movw	r2, #10120	; 0x2788
    163c:	e3402000 	movt	r2, #0
    1640:	ebfffb3f 	bl	344 <video_text>


        // Mostrar SCORE centralizado
        score_text[30];
        temp_score = score;
    1644:	e5951020 	ldr	r1, [r5, #32]
        score = 0;
    1648:	e3a02000 	mov	r2, #0
    164c:	e5852020 	str	r2, [r5, #32]
        score_text[0] = 'S'; score_text[1] = 'C'; score_text[2] = 'O';
    1650:	e3a03053 	mov	r3, #83	; 0x53
    1654:	e5cd3010 	strb	r3, [sp, #16]
    1658:	e3a03043 	mov	r3, #67	; 0x43
    165c:	e5cd3011 	strb	r3, [sp, #17]
    1660:	e3a0304f 	mov	r3, #79	; 0x4f
    1664:	e5cd3012 	strb	r3, [sp, #18]
        score_text[3] = 'R'; score_text[4] = 'E'; score_text[5] = ':'; 
    1668:	e3a03052 	mov	r3, #82	; 0x52
    166c:	e5cd3013 	strb	r3, [sp, #19]
    1670:	e3a03045 	mov	r3, #69	; 0x45
    1674:	e5cd3014 	strb	r3, [sp, #20]
    1678:	e3a0303a 	mov	r3, #58	; 0x3a
    167c:	e5cd3015 	strb	r3, [sp, #21]
        score_text[6] = ' ';
    1680:	e3a03020 	mov	r3, #32
    1684:	e5cd3016 	strb	r3, [sp, #22]

        
        if (temp_score == 0) {
    1688:	e1510002 	cmp	r1, r2
    168c:	0a000002 	beq	169c <main+0x4cc>
            score_text[7] = '0';
            score_text[8] = '\0';
        } else {
            int i = 7;
            while (temp_score > 0) {
    1690:	c3a03007 	movgt	r3, #7
    1694:	ca000005 	bgt	16b0 <main+0x4e0>
    1698:	ea00003a 	b	1788 <main+0x5b8>
        score_text[3] = 'R'; score_text[4] = 'E'; score_text[5] = ':'; 
        score_text[6] = ' ';

        
        if (temp_score == 0) {
            score_text[7] = '0';
    169c:	e3a03030 	mov	r3, #48	; 0x30
    16a0:	e5cd3017 	strb	r3, [sp, #23]
            score_text[8] = '\0';
    16a4:	e3a03000 	mov	r3, #0
    16a8:	e5cd3018 	strb	r3, [sp, #24]
    16ac:	ea00001c 	b	1724 <main+0x554>
        } else {
            int i = 7;
            while (temp_score > 0) {
                score_text[i] = (temp_score % 10) + '0';
    16b0:	e0c0219b 	smull	r2, r0, r11, r1
    16b4:	e1a02fc1 	asr	r2, r1, #31
    16b8:	e0622140 	rsb	r2, r2, r0, asr #2
    16bc:	e0820102 	add	r0, r2, r2, lsl #2
    16c0:	e0411080 	sub	r1, r1, r0, lsl #1
    16c4:	e2811030 	add	r1, r1, #48	; 0x30
    16c8:	e28d0010 	add	r0, sp, #16
    16cc:	e7c31000 	strb	r1, [r3, r0]
                temp_score /= 10;
    16d0:	e1a01002 	mov	r1, r2
                i++;
    16d4:	e2833001 	add	r3, r3, #1
        if (temp_score == 0) {
            score_text[7] = '0';
            score_text[8] = '\0';
        } else {
            int i = 7;
            while (temp_score > 0) {
    16d8:	e3520000 	cmp	r2, #0
    16dc:	cafffff3 	bgt	16b0 <main+0x4e0>
                score_text[i] = (temp_score % 10) + '0';
                temp_score /= 10;
                i++;
            }
            score_text[i] = '\0';
    16e0:	e28d0030 	add	r0, sp, #48	; 0x30
    16e4:	e0802003 	add	r2, r0, r3
    16e8:	e3a01000 	mov	r1, #0
    16ec:	e5421020 	strb	r1, [r2, #-32]	; 0xffffffe0
            int start = 7, end = i - 1;
    16f0:	e2433001 	sub	r3, r3, #1
            while (start < end) {
    16f4:	e3530007 	cmp	r3, #7
    16f8:	da000009 	ble	1724 <main+0x554>
                score_text[i] = (temp_score % 10) + '0';
                temp_score /= 10;
                i++;
            }
            score_text[i] = '\0';
            int start = 7, end = i - 1;
    16fc:	e3a02007 	mov	r2, #7
            while (start < end) {
                char temp = score_text[start];
    1700:	e28d1010 	add	r1, sp, #16
    1704:	e7d20001 	ldrb	r0, [r2, r1]
                score_text[start] = score_text[end];
    1708:	e7d3c001 	ldrb	r12, [r3, r1]
    170c:	e7c2c001 	strb	r12, [r2, r1]
                score_text[end] = temp;
    1710:	e7c30001 	strb	r0, [r3, r1]
                start++;
    1714:	e2822001 	add	r2, r2, #1
                end--;
    1718:	e2433001 	sub	r3, r3, #1
                temp_score /= 10;
                i++;
            }
            score_text[i] = '\0';
            int start = 7, end = i - 1;
            while (start < end) {
    171c:	e1520003 	cmp	r2, r3
    1720:	bafffff6 	blt	1700 <main+0x530>
                start++;
                end--;
            }
        }

                video_text(36, 15, score_text);
    1724:	e3a00024 	mov	r0, #36	; 0x24
    1728:	e3a0100f 	mov	r1, #15
    172c:	e28d2010 	add	r2, sp, #16
    1730:	ebfffb03 	bl	344 <video_text>

        // Mensagem para reinício
        video_text(28, 18, "Pressione KEY1 para reiniciar");
    1734:	e3a0001c 	mov	r0, #28
    1738:	e3a01012 	mov	r1, #18
    173c:	e30227a0 	movw	r2, #10144	; 0x27a0
    1740:	e3402000 	movt	r2, #0
    1744:	ebfffafe 	bl	344 <video_text>

        // (opcional) desenha o dinossauro parado
        draw_dino(140, 170, 0, 0);
    1748:	e3a0008c 	mov	r0, #140	; 0x8c
    174c:	e3a010aa 	mov	r1, #170	; 0xaa
    1750:	e3a02000 	mov	r2, #0
    1754:	e1a03002 	mov	r3, r2
    1758:	ebfffdb8 	bl	e40 <draw_dino>

        
        
        while ((*key_ptr & 0x2) != 0);
    175c:	e3a02000 	mov	r2, #0
    1760:	e34f2f20 	movt	r2, #65312	; 0xff20
    1764:	e5923050 	ldr	r3, [r2, #80]	; 0x50
    1768:	e3130002 	tst	r3, #2
    176c:	1afffffc 	bne	1764 <main+0x594>
        while ((*key_ptr & 0x2) == 0);
    1770:	e3a02000 	mov	r2, #0
    1774:	e34f2f20 	movt	r2, #65312	; 0xff20
    1778:	e5923050 	ldr	r3, [r2, #80]	; 0x50
    177c:	e3130002 	tst	r3, #2
    1780:	0afffffc 	beq	1778 <main+0x5a8>
    1784:	eafffeb5 	b	1260 <main+0x90>
            while (temp_score > 0) {
                score_text[i] = (temp_score % 10) + '0';
                temp_score /= 10;
                i++;
            }
            score_text[i] = '\0';
    1788:	e3a02000 	mov	r2, #0
    178c:	e5cd2017 	strb	r2, [sp, #23]
    1790:	eaffffe3 	b	1724 <main+0x554>

00001794 <__aeabi_idiv>:
    1794:	e3510000 	cmp	r1, #0
    1798:	0a000043 	beq	18ac <.divsi3_skip_div0_test+0x110>

0000179c <.divsi3_skip_div0_test>:
    179c:	e020c001 	eor	r12, r0, r1
    17a0:	42611000 	rsbmi	r1, r1, #0
    17a4:	e2512001 	subs	r2, r1, #1
    17a8:	0a000027 	beq	184c <.divsi3_skip_div0_test+0xb0>
    17ac:	e1b03000 	movs	r3, r0
    17b0:	42603000 	rsbmi	r3, r0, #0
    17b4:	e1530001 	cmp	r3, r1
    17b8:	9a000026 	bls	1858 <.divsi3_skip_div0_test+0xbc>
    17bc:	e1110002 	tst	r1, r2
    17c0:	0a000028 	beq	1868 <.divsi3_skip_div0_test+0xcc>
    17c4:	e311020e 	tst	r1, #-536870912	; 0xe0000000
    17c8:	01a01181 	lsleq	r1, r1, #3
    17cc:	03a02008 	moveq	r2, #8
    17d0:	13a02001 	movne	r2, #1
    17d4:	e3510201 	cmp	r1, #268435456	; 0x10000000
    17d8:	31510003 	cmpcc	r1, r3
    17dc:	31a01201 	lslcc	r1, r1, #4
    17e0:	31a02202 	lslcc	r2, r2, #4
    17e4:	3afffffa 	bcc	17d4 <.divsi3_skip_div0_test+0x38>
    17e8:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    17ec:	31510003 	cmpcc	r1, r3
    17f0:	31a01081 	lslcc	r1, r1, #1
    17f4:	31a02082 	lslcc	r2, r2, #1
    17f8:	3afffffa 	bcc	17e8 <.divsi3_skip_div0_test+0x4c>
    17fc:	e3a00000 	mov	r0, #0
    1800:	e1530001 	cmp	r3, r1
    1804:	20433001 	subcs	r3, r3, r1
    1808:	21800002 	orrcs	r0, r0, r2
    180c:	e15300a1 	cmp	r3, r1, lsr #1
    1810:	204330a1 	subcs	r3, r3, r1, lsr #1
    1814:	218000a2 	orrcs	r0, r0, r2, lsr #1
    1818:	e1530121 	cmp	r3, r1, lsr #2
    181c:	20433121 	subcs	r3, r3, r1, lsr #2
    1820:	21800122 	orrcs	r0, r0, r2, lsr #2
    1824:	e15301a1 	cmp	r3, r1, lsr #3
    1828:	204331a1 	subcs	r3, r3, r1, lsr #3
    182c:	218001a2 	orrcs	r0, r0, r2, lsr #3
    1830:	e3530000 	cmp	r3, #0
    1834:	11b02222 	lsrsne	r2, r2, #4
    1838:	11a01221 	lsrne	r1, r1, #4
    183c:	1affffef 	bne	1800 <.divsi3_skip_div0_test+0x64>
    1840:	e35c0000 	cmp	r12, #0
    1844:	42600000 	rsbmi	r0, r0, #0
    1848:	e12fff1e 	bx	lr
    184c:	e13c0000 	teq	r12, r0
    1850:	42600000 	rsbmi	r0, r0, #0
    1854:	e12fff1e 	bx	lr
    1858:	33a00000 	movcc	r0, #0
    185c:	01a00fcc 	asreq	r0, r12, #31
    1860:	03800001 	orreq	r0, r0, #1
    1864:	e12fff1e 	bx	lr
    1868:	e3510801 	cmp	r1, #65536	; 0x10000
    186c:	21a01821 	lsrcs	r1, r1, #16
    1870:	23a02010 	movcs	r2, #16
    1874:	33a02000 	movcc	r2, #0
    1878:	e3510c01 	cmp	r1, #256	; 0x100
    187c:	21a01421 	lsrcs	r1, r1, #8
    1880:	22822008 	addcs	r2, r2, #8
    1884:	e3510010 	cmp	r1, #16
    1888:	21a01221 	lsrcs	r1, r1, #4
    188c:	22822004 	addcs	r2, r2, #4
    1890:	e3510004 	cmp	r1, #4
    1894:	82822003 	addhi	r2, r2, #3
    1898:	908220a1 	addls	r2, r2, r1, lsr #1
    189c:	e35c0000 	cmp	r12, #0
    18a0:	e1a00233 	lsr	r0, r3, r2
    18a4:	42600000 	rsbmi	r0, r0, #0
    18a8:	e12fff1e 	bx	lr
    18ac:	e3500000 	cmp	r0, #0
    18b0:	c3e00102 	mvngt	r0, #-2147483648	; 0x80000000
    18b4:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
    18b8:	ea000007 	b	18dc <__aeabi_idiv0>

000018bc <__aeabi_idivmod>:
    18bc:	e3510000 	cmp	r1, #0
    18c0:	0afffff9 	beq	18ac <.divsi3_skip_div0_test+0x110>
    18c4:	e92d4003 	push	{r0, r1, lr}
    18c8:	ebffffb3 	bl	179c <.divsi3_skip_div0_test>
    18cc:	e8bd4006 	pop	{r1, r2, lr}
    18d0:	e0030092 	mul	r3, r2, r0
    18d4:	e0411003 	sub	r1, r1, r3
    18d8:	e12fff1e 	bx	lr

000018dc <__aeabi_idiv0>:
    18dc:	e12fff1e 	bx	lr

000018e0 <atexit>:
    18e0:	e1a01000 	mov	r1, r0
    18e4:	e3a00000 	mov	r0, #0
    18e8:	e92d4008 	push	{r3, lr}
    18ec:	e1a02000 	mov	r2, r0
    18f0:	e1a03000 	mov	r3, r0
    18f4:	eb0000fc 	bl	1cec <__register_exitproc>
    18f8:	e8bd4008 	pop	{r3, lr}
    18fc:	e12fff1e 	bx	lr

00001900 <exit>:
    1900:	e92d4008 	push	{r3, lr}
    1904:	e3a01000 	mov	r1, #0
    1908:	e1a04000 	mov	r4, r0
    190c:	eb000133 	bl	1de0 <__call_exitprocs>
    1910:	e59f3018 	ldr	r3, [pc, #24]	; 1930 <exit+0x30>
    1914:	e5930000 	ldr	r0, [r3]
    1918:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    191c:	e3530000 	cmp	r3, #0
    1920:	11a0e00f 	movne	lr, pc
    1924:	112fff13 	bxne	r3
    1928:	e1a00004 	mov	r0, r4
    192c:	eb0001b7 	bl	2010 <_exit>
    1930:	000027c0 	.word	0x000027c0

00001934 <memcpy>:
    1934:	e3520003 	cmp	r2, #3
    1938:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    193c:	8a000009 	bhi	1968 <memcpy+0x34>
    1940:	e3520000 	cmp	r2, #0
    1944:	0a000005 	beq	1960 <memcpy+0x2c>
    1948:	e3a03000 	mov	r3, #0
    194c:	e7d1c003 	ldrb	r12, [r1, r3]
    1950:	e7c0c003 	strb	r12, [r0, r3]
    1954:	e2833001 	add	r3, r3, #1
    1958:	e1530002 	cmp	r3, r2
    195c:	1afffffa 	bne	194c <memcpy+0x18>
    1960:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    1964:	e12fff1e 	bx	lr
    1968:	e3100003 	tst	r0, #3
    196c:	e0802002 	add	r2, r0, r2
    1970:	0a00000b 	beq	19a4 <memcpy+0x70>
    1974:	e280c001 	add	r12, r0, #1
    1978:	e2814001 	add	r4, r1, #1
    197c:	e20c3003 	and	r3, r12, #3
    1980:	e5545001 	ldrb	r5, [r4, #-1]
    1984:	e3530000 	cmp	r3, #0
    1988:	e1a01004 	mov	r1, r4
    198c:	e1a0300c 	mov	r3, r12
    1990:	e54c5001 	strb	r5, [r12, #-1]
    1994:	e2844001 	add	r4, r4, #1
    1998:	e28cc001 	add	r12, r12, #1
    199c:	1afffff6 	bne	197c <memcpy+0x48>
    19a0:	ea000000 	b	19a8 <memcpy+0x74>
    19a4:	e1a03000 	mov	r3, r0
    19a8:	e211c003 	ands	r12, r1, #3
    19ac:	1a00004f 	bne	1af0 <memcpy+0x1bc>
    19b0:	e063c002 	rsb	r12, r3, r2
    19b4:	e35c003f 	cmp	r12, #63	; 0x3f
    19b8:	da000024 	ble	1a50 <memcpy+0x11c>
    19bc:	e591c000 	ldr	r12, [r1]
    19c0:	e583c000 	str	r12, [r3]
    19c4:	e591c004 	ldr	r12, [r1, #4]
    19c8:	e583c004 	str	r12, [r3, #4]
    19cc:	e591c008 	ldr	r12, [r1, #8]
    19d0:	e583c008 	str	r12, [r3, #8]
    19d4:	e591c00c 	ldr	r12, [r1, #12]
    19d8:	e583c00c 	str	r12, [r3, #12]
    19dc:	e591c010 	ldr	r12, [r1, #16]
    19e0:	e583c010 	str	r12, [r3, #16]
    19e4:	e591c014 	ldr	r12, [r1, #20]
    19e8:	e583c014 	str	r12, [r3, #20]
    19ec:	e591c018 	ldr	r12, [r1, #24]
    19f0:	e583c018 	str	r12, [r3, #24]
    19f4:	e591c01c 	ldr	r12, [r1, #28]
    19f8:	e583c01c 	str	r12, [r3, #28]
    19fc:	e591c020 	ldr	r12, [r1, #32]
    1a00:	e583c020 	str	r12, [r3, #32]
    1a04:	e591c024 	ldr	r12, [r1, #36]	; 0x24
    1a08:	e583c024 	str	r12, [r3, #36]	; 0x24
    1a0c:	e591c028 	ldr	r12, [r1, #40]	; 0x28
    1a10:	e583c028 	str	r12, [r3, #40]	; 0x28
    1a14:	e591c02c 	ldr	r12, [r1, #44]	; 0x2c
    1a18:	e583c02c 	str	r12, [r3, #44]	; 0x2c
    1a1c:	e591c030 	ldr	r12, [r1, #48]	; 0x30
    1a20:	e583c030 	str	r12, [r3, #48]	; 0x30
    1a24:	e591c034 	ldr	r12, [r1, #52]	; 0x34
    1a28:	e583c034 	str	r12, [r3, #52]	; 0x34
    1a2c:	e591c038 	ldr	r12, [r1, #56]	; 0x38
    1a30:	e583c038 	str	r12, [r3, #56]	; 0x38
    1a34:	e591c03c 	ldr	r12, [r1, #60]	; 0x3c
    1a38:	e2833040 	add	r3, r3, #64	; 0x40
    1a3c:	e503c004 	str	r12, [r3, #-4]
    1a40:	e063c002 	rsb	r12, r3, r2
    1a44:	e35c003f 	cmp	r12, #63	; 0x3f
    1a48:	e2811040 	add	r1, r1, #64	; 0x40
    1a4c:	caffffda 	bgt	19bc <memcpy+0x88>
    1a50:	e35c000f 	cmp	r12, #15
    1a54:	da00000c 	ble	1a8c <memcpy+0x158>
    1a58:	e591c000 	ldr	r12, [r1]
    1a5c:	e583c000 	str	r12, [r3]
    1a60:	e591c004 	ldr	r12, [r1, #4]
    1a64:	e583c004 	str	r12, [r3, #4]
    1a68:	e591c008 	ldr	r12, [r1, #8]
    1a6c:	e583c008 	str	r12, [r3, #8]
    1a70:	e591c00c 	ldr	r12, [r1, #12]
    1a74:	e2833010 	add	r3, r3, #16
    1a78:	e503c004 	str	r12, [r3, #-4]
    1a7c:	e063c002 	rsb	r12, r3, r2
    1a80:	e35c000f 	cmp	r12, #15
    1a84:	e2811010 	add	r1, r1, #16
    1a88:	cafffff2 	bgt	1a58 <memcpy+0x124>
    1a8c:	e35c0003 	cmp	r12, #3
    1a90:	da00000a 	ble	1ac0 <memcpy+0x18c>
    1a94:	e283c004 	add	r12, r3, #4
    1a98:	e2814004 	add	r4, r1, #4
    1a9c:	e06c3002 	rsb	r3, r12, r2
    1aa0:	e5145004 	ldr	r5, [r4, #-4]
    1aa4:	e3530003 	cmp	r3, #3
    1aa8:	e1a01004 	mov	r1, r4
    1aac:	e1a0300c 	mov	r3, r12
    1ab0:	e50c5004 	str	r5, [r12, #-4]
    1ab4:	e2844004 	add	r4, r4, #4
    1ab8:	e28cc004 	add	r12, r12, #4
    1abc:	cafffff6 	bgt	1a9c <memcpy+0x168>
    1ac0:	e1520003 	cmp	r2, r3
    1ac4:	82833001 	addhi	r3, r3, #1
    1ac8:	82811001 	addhi	r1, r1, #1
    1acc:	82822001 	addhi	r2, r2, #1
    1ad0:	9affffa2 	bls	1960 <memcpy+0x2c>
    1ad4:	e551c001 	ldrb	r12, [r1, #-1]
    1ad8:	e2833001 	add	r3, r3, #1
    1adc:	e1530002 	cmp	r3, r2
    1ae0:	e543c002 	strb	r12, [r3, #-2]
    1ae4:	e2811001 	add	r1, r1, #1
    1ae8:	1afffff9 	bne	1ad4 <memcpy+0x1a0>
    1aec:	eaffff9b 	b	1960 <memcpy+0x2c>
    1af0:	e0635002 	rsb	r5, r3, r2
    1af4:	e06c4001 	rsb	r4, r12, r1
    1af8:	e3550003 	cmp	r5, #3
    1afc:	e5945000 	ldr	r5, [r4]
    1b00:	daffffee 	ble	1ac0 <memcpy+0x18c>
    1b04:	e26c6004 	rsb	r6, r12, #4
    1b08:	e1a0718c 	lsl	r7, r12, #3
    1b0c:	e1a06186 	lsl	r6, r6, #3
    1b10:	e283c004 	add	r12, r3, #4
    1b14:	e1a08735 	lsr	r8, r5, r7
    1b18:	e5b45004 	ldr	r5, [r4, #4]!
    1b1c:	e1888615 	orr	r8, r8, r5, lsl r6
    1b20:	e06c3002 	rsb	r3, r12, r2
    1b24:	e3530003 	cmp	r3, #3
    1b28:	e50c8004 	str	r8, [r12, #-4]
    1b2c:	e1a0300c 	mov	r3, r12
    1b30:	e2811004 	add	r1, r1, #4
    1b34:	e28cc004 	add	r12, r12, #4
    1b38:	cafffff5 	bgt	1b14 <memcpy+0x1e0>
    1b3c:	eaffffdf 	b	1ac0 <memcpy+0x18c>

00001b40 <memset>:
    1b40:	e3520003 	cmp	r2, #3
    1b44:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    1b48:	e20110ff 	and	r1, r1, #255	; 0xff
    1b4c:	8a000008 	bhi	1b74 <memset+0x34>
    1b50:	e3520000 	cmp	r2, #0
    1b54:	0a000004 	beq	1b6c <memset+0x2c>
    1b58:	e1a03000 	mov	r3, r0
    1b5c:	e0822000 	add	r2, r2, r0
    1b60:	e4c31001 	strb	r1, [r3], #1
    1b64:	e1530002 	cmp	r3, r2
    1b68:	1afffffc 	bne	1b60 <memset+0x20>
    1b6c:	e8bd0010 	ldmfd	sp!, {r4}
    1b70:	e12fff1e 	bx	lr
    1b74:	e3100003 	tst	r0, #3
    1b78:	e0802002 	add	r2, r0, r2
    1b7c:	0a000007 	beq	1ba0 <memset+0x60>
    1b80:	e280c001 	add	r12, r0, #1
    1b84:	e20c3003 	and	r3, r12, #3
    1b88:	e3530000 	cmp	r3, #0
    1b8c:	e54c1001 	strb	r1, [r12, #-1]
    1b90:	e1a0300c 	mov	r3, r12
    1b94:	e28cc001 	add	r12, r12, #1
    1b98:	1afffff9 	bne	1b84 <memset+0x44>
    1b9c:	ea000000 	b	1ba4 <memset+0x64>
    1ba0:	e1a03000 	mov	r3, r0
    1ba4:	e0634002 	rsb	r4, r3, r2
    1ba8:	e081c401 	add	r12, r1, r1, lsl #8
    1bac:	e354003f 	cmp	r4, #63	; 0x3f
    1bb0:	e08cc80c 	add	r12, r12, r12, lsl #16
    1bb4:	da00001a 	ble	1c24 <memset+0xe4>
    1bb8:	e583c000 	str	r12, [r3]
    1bbc:	e583c004 	str	r12, [r3, #4]
    1bc0:	e583c008 	str	r12, [r3, #8]
    1bc4:	e583c00c 	str	r12, [r3, #12]
    1bc8:	e583c010 	str	r12, [r3, #16]
    1bcc:	e583c014 	str	r12, [r3, #20]
    1bd0:	e583c018 	str	r12, [r3, #24]
    1bd4:	e583c01c 	str	r12, [r3, #28]
    1bd8:	e583c020 	str	r12, [r3, #32]
    1bdc:	e583c024 	str	r12, [r3, #36]	; 0x24
    1be0:	e583c028 	str	r12, [r3, #40]	; 0x28
    1be4:	e583c02c 	str	r12, [r3, #44]	; 0x2c
    1be8:	e583c030 	str	r12, [r3, #48]	; 0x30
    1bec:	e583c034 	str	r12, [r3, #52]	; 0x34
    1bf0:	e583c038 	str	r12, [r3, #56]	; 0x38
    1bf4:	e583c03c 	str	r12, [r3, #60]	; 0x3c
    1bf8:	e2833040 	add	r3, r3, #64	; 0x40
    1bfc:	e0634002 	rsb	r4, r3, r2
    1c00:	e354003f 	cmp	r4, #63	; 0x3f
    1c04:	caffffeb 	bgt	1bb8 <memset+0x78>
    1c08:	ea000005 	b	1c24 <memset+0xe4>
    1c0c:	e583c000 	str	r12, [r3]
    1c10:	e583c004 	str	r12, [r3, #4]
    1c14:	e583c008 	str	r12, [r3, #8]
    1c18:	e583c00c 	str	r12, [r3, #12]
    1c1c:	e2833010 	add	r3, r3, #16
    1c20:	e0634002 	rsb	r4, r3, r2
    1c24:	e354000f 	cmp	r4, #15
    1c28:	cafffff7 	bgt	1c0c <memset+0xcc>
    1c2c:	e3540003 	cmp	r4, #3
    1c30:	da000006 	ble	1c50 <memset+0x110>
    1c34:	e2834004 	add	r4, r3, #4
    1c38:	e0643002 	rsb	r3, r4, r2
    1c3c:	e3530003 	cmp	r3, #3
    1c40:	e504c004 	str	r12, [r4, #-4]
    1c44:	e1a03004 	mov	r3, r4
    1c48:	e2844004 	add	r4, r4, #4
    1c4c:	cafffff9 	bgt	1c38 <memset+0xf8>
    1c50:	e1520003 	cmp	r2, r3
    1c54:	9affffc4 	bls	1b6c <memset+0x2c>
    1c58:	e2833001 	add	r3, r3, #1
    1c5c:	e2822001 	add	r2, r2, #1
    1c60:	e5431001 	strb	r1, [r3, #-1]
    1c64:	e2833001 	add	r3, r3, #1
    1c68:	e1530002 	cmp	r3, r2
    1c6c:	1afffffb 	bne	1c60 <memset+0x120>
    1c70:	eaffffbd 	b	1b6c <memset+0x2c>

00001c74 <srand>:
    1c74:	e59f3010 	ldr	r3, [pc, #16]	; 1c8c <srand+0x18>
    1c78:	e5933000 	ldr	r3, [r3]
    1c7c:	e3a02000 	mov	r2, #0
    1c80:	e58300a8 	str	r0, [r3, #168]	; 0xa8
    1c84:	e58320ac 	str	r2, [r3, #172]	; 0xac
    1c88:	e12fff1e 	bx	lr
    1c8c:	00002840 	.word	0x00002840

00001c90 <rand>:
    1c90:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    1c94:	e59f3044 	ldr	r3, [pc, #68]	; 1ce0 <rand+0x50>
    1c98:	e593c000 	ldr	r12, [r3]
    1c9c:	e59f4040 	ldr	r4, [pc, #64]	; 1ce4 <rand+0x54>
    1ca0:	e59c20a8 	ldr	r2, [r12, #168]	; 0xa8
    1ca4:	e0040492 	mul	r4, r2, r4
    1ca8:	e59c10ac 	ldr	r1, [r12, #172]	; 0xac
    1cac:	e59f3034 	ldr	r3, [pc, #52]	; 1ce8 <rand+0x58>
    1cb0:	e0244193 	mla	r4, r3, r1, r4
    1cb4:	e0810392 	umull	r0, r1, r2, r3
    1cb8:	e3a02001 	mov	r2, #1
    1cbc:	e0922000 	adds	r2, r2, r0
    1cc0:	e0841001 	add	r1, r4, r1
    1cc4:	e3a03000 	mov	r3, #0
    1cc8:	e0a33001 	adc	r3, r3, r1
    1ccc:	e58c20a8 	str	r2, [r12, #168]	; 0xa8
    1cd0:	e58c30ac 	str	r3, [r12, #172]	; 0xac
    1cd4:	e3c30102 	bic	r0, r3, #-2147483648	; 0x80000000
    1cd8:	e8bd0010 	ldmfd	sp!, {r4}
    1cdc:	e12fff1e 	bx	lr
    1ce0:	00002840 	.word	0x00002840
    1ce4:	5851f42d 	.word	0x5851f42d
    1ce8:	4c957f2d 	.word	0x4c957f2d

00001cec <__register_exitproc>:
    1cec:	e59fc0e4 	ldr	r12, [pc, #228]	; 1dd8 <__register_exitproc+0xec>
    1cf0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    1cf4:	e59c4000 	ldr	r4, [r12]
    1cf8:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    1cfc:	e35c0000 	cmp	r12, #0
    1d00:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    1d04:	e59c5004 	ldr	r5, [r12, #4]
    1d08:	0584c148 	streq	r12, [r4, #328]	; 0x148
    1d0c:	e355001f 	cmp	r5, #31
    1d10:	e24dd010 	sub	sp, sp, #16
    1d14:	e1a06000 	mov	r6, r0
    1d18:	da000015 	ble	1d74 <__register_exitproc+0x88>
    1d1c:	e59f00b8 	ldr	r0, [pc, #184]	; 1ddc <__register_exitproc+0xf0>
    1d20:	e3500000 	cmp	r0, #0
    1d24:	1a000001 	bne	1d30 <__register_exitproc+0x44>
    1d28:	e3e00000 	mvn	r0, #0
    1d2c:	ea000018 	b	1d94 <__register_exitproc+0xa8>
    1d30:	e3a00e19 	mov	r0, #400	; 0x190
    1d34:	e58d100c 	str	r1, [sp, #12]
    1d38:	e58d2008 	str	r2, [sp, #8]
    1d3c:	e58d3004 	str	r3, [sp, #4]
    1d40:	e320f000 	nop	{0}
    1d44:	e250c000 	subs	r12, r0, #0
    1d48:	e59d100c 	ldr	r1, [sp, #12]
    1d4c:	e59d2008 	ldr	r2, [sp, #8]
    1d50:	e59d3004 	ldr	r3, [sp, #4]
    1d54:	0afffff3 	beq	1d28 <__register_exitproc+0x3c>
    1d58:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    1d5c:	e3a00000 	mov	r0, #0
    1d60:	e58c0004 	str	r0, [r12, #4]
    1d64:	e58c5000 	str	r5, [r12]
    1d68:	e584c148 	str	r12, [r4, #328]	; 0x148
    1d6c:	e58c0188 	str	r0, [r12, #392]	; 0x188
    1d70:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    1d74:	e3560000 	cmp	r6, #0
    1d78:	e59c4004 	ldr	r4, [r12, #4]
    1d7c:	1a000007 	bne	1da0 <__register_exitproc+0xb4>
    1d80:	e2843002 	add	r3, r4, #2
    1d84:	e2844001 	add	r4, r4, #1
    1d88:	e78c1103 	str	r1, [r12, r3, lsl #2]
    1d8c:	e58c4004 	str	r4, [r12, #4]
    1d90:	e3a00000 	mov	r0, #0
    1d94:	e28dd010 	add	sp, sp, #16
    1d98:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    1d9c:	e12fff1e 	bx	lr
    1da0:	e3a00001 	mov	r0, #1
    1da4:	e1a00410 	lsl	r0, r0, r4
    1da8:	e08c8104 	add	r8, r12, r4, lsl #2
    1dac:	e3560002 	cmp	r6, #2
    1db0:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    1db4:	e5883108 	str	r3, [r8, #264]	; 0x108
    1db8:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    1dbc:	e1877000 	orr	r7, r7, r0
    1dc0:	01830000 	orreq	r0, r3, r0
    1dc4:	e1a05008 	mov	r5, r8
    1dc8:	e5882088 	str	r2, [r8, #136]	; 0x88
    1dcc:	e58c7188 	str	r7, [r12, #392]	; 0x188
    1dd0:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    1dd4:	eaffffe9 	b	1d80 <__register_exitproc+0x94>
    1dd8:	000027c0 	.word	0x000027c0
    1ddc:	00000000 	.word	0x00000000

00001de0 <__call_exitprocs>:
    1de0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1de4:	e59f3168 	ldr	r3, [pc, #360]	; 1f54 <__call_exitprocs+0x174>
    1de8:	e5933000 	ldr	r3, [r3]
    1dec:	e24dd014 	sub	sp, sp, #20
    1df0:	e58d3004 	str	r3, [sp, #4]
    1df4:	e2833f52 	add	r3, r3, #328	; 0x148
    1df8:	e58d0008 	str	r0, [sp, #8]
    1dfc:	e58d300c 	str	r3, [sp, #12]
    1e00:	e1a07001 	mov	r7, r1
    1e04:	e3a08001 	mov	r8, #1
    1e08:	e59d3004 	ldr	r3, [sp, #4]
    1e0c:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    1e10:	e3560000 	cmp	r6, #0
    1e14:	e59db00c 	ldr	r11, [sp, #12]
    1e18:	0a000033 	beq	1eec <__call_exitprocs+0x10c>
    1e1c:	e5965004 	ldr	r5, [r6, #4]
    1e20:	e2554001 	subs	r4, r5, #1
    1e24:	5286a088 	addpl	r10, r6, #136	; 0x88
    1e28:	5285501f 	addpl	r5, r5, #31
    1e2c:	508a5105 	addpl	r5, r10, r5, lsl #2
    1e30:	5a000007 	bpl	1e54 <__call_exitprocs+0x74>
    1e34:	ea000029 	b	1ee0 <__call_exitprocs+0x100>
    1e38:	e5953000 	ldr	r3, [r5]
    1e3c:	e1530007 	cmp	r3, r7
    1e40:	0a000005 	beq	1e5c <__call_exitprocs+0x7c>
    1e44:	e2444001 	sub	r4, r4, #1
    1e48:	e3740001 	cmn	r4, #1
    1e4c:	e2455004 	sub	r5, r5, #4
    1e50:	0a000022 	beq	1ee0 <__call_exitprocs+0x100>
    1e54:	e3570000 	cmp	r7, #0
    1e58:	1afffff6 	bne	1e38 <__call_exitprocs+0x58>
    1e5c:	e5963004 	ldr	r3, [r6, #4]
    1e60:	e06a2005 	rsb	r2, r10, r5
    1e64:	e2433001 	sub	r3, r3, #1
    1e68:	e0862002 	add	r2, r6, r2
    1e6c:	e1530004 	cmp	r3, r4
    1e70:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    1e74:	13a01000 	movne	r1, #0
    1e78:	05864004 	streq	r4, [r6, #4]
    1e7c:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    1e80:	e3530000 	cmp	r3, #0
    1e84:	0affffee 	beq	1e44 <__call_exitprocs+0x64>
    1e88:	e1a02418 	lsl	r2, r8, r4
    1e8c:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    1e90:	e1120001 	tst	r2, r1
    1e94:	e5969004 	ldr	r9, [r6, #4]
    1e98:	0a000016 	beq	1ef8 <__call_exitprocs+0x118>
    1e9c:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    1ea0:	e1120001 	tst	r2, r1
    1ea4:	1a000016 	bne	1f04 <__call_exitprocs+0x124>
    1ea8:	e59d0008 	ldr	r0, [sp, #8]
    1eac:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    1eb0:	e1a0e00f 	mov	lr, pc
    1eb4:	e12fff13 	bx	r3
    1eb8:	e5963004 	ldr	r3, [r6, #4]
    1ebc:	e1530009 	cmp	r3, r9
    1ec0:	1affffd0 	bne	1e08 <__call_exitprocs+0x28>
    1ec4:	e59b3000 	ldr	r3, [r11]
    1ec8:	e1530006 	cmp	r3, r6
    1ecc:	1affffcd 	bne	1e08 <__call_exitprocs+0x28>
    1ed0:	e2444001 	sub	r4, r4, #1
    1ed4:	e3740001 	cmn	r4, #1
    1ed8:	e2455004 	sub	r5, r5, #4
    1edc:	1affffdc 	bne	1e54 <__call_exitprocs+0x74>
    1ee0:	e59f1070 	ldr	r1, [pc, #112]	; 1f58 <__call_exitprocs+0x178>
    1ee4:	e3510000 	cmp	r1, #0
    1ee8:	1a000009 	bne	1f14 <__call_exitprocs+0x134>
    1eec:	e28dd014 	add	sp, sp, #20
    1ef0:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1ef4:	e12fff1e 	bx	lr
    1ef8:	e1a0e00f 	mov	lr, pc
    1efc:	e12fff13 	bx	r3
    1f00:	eaffffec 	b	1eb8 <__call_exitprocs+0xd8>
    1f04:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    1f08:	e1a0e00f 	mov	lr, pc
    1f0c:	e12fff13 	bx	r3
    1f10:	eaffffe8 	b	1eb8 <__call_exitprocs+0xd8>
    1f14:	e5963004 	ldr	r3, [r6, #4]
    1f18:	e3530000 	cmp	r3, #0
    1f1c:	e5963000 	ldr	r3, [r6]
    1f20:	1a000008 	bne	1f48 <__call_exitprocs+0x168>
    1f24:	e3530000 	cmp	r3, #0
    1f28:	0a000006 	beq	1f48 <__call_exitprocs+0x168>
    1f2c:	e1a00006 	mov	r0, r6
    1f30:	e58b3000 	str	r3, [r11]
    1f34:	e320f000 	nop	{0}
    1f38:	e59b6000 	ldr	r6, [r11]
    1f3c:	e3560000 	cmp	r6, #0
    1f40:	1affffb5 	bne	1e1c <__call_exitprocs+0x3c>
    1f44:	eaffffe8 	b	1eec <__call_exitprocs+0x10c>
    1f48:	e1a0b006 	mov	r11, r6
    1f4c:	e1a06003 	mov	r6, r3
    1f50:	eafffff9 	b	1f3c <__call_exitprocs+0x15c>
    1f54:	000027c0 	.word	0x000027c0
    1f58:	00000000 	.word	0x00000000

00001f5c <register_fini>:
    1f5c:	e92d4008 	push	{r3, lr}
    1f60:	e59f3010 	ldr	r3, [pc, #16]	; 1f78 <register_fini+0x1c>
    1f64:	e3530000 	cmp	r3, #0
    1f68:	159f000c 	ldrne	r0, [pc, #12]	; 1f7c <register_fini+0x20>
    1f6c:	1bfffe5b 	blne	18e0 <atexit>
    1f70:	e8bd4008 	pop	{r3, lr}
    1f74:	e12fff1e 	bx	lr
    1f78:	000027e8 	.word	0x000027e8
    1f7c:	00001f80 	.word	0x00001f80

00001f80 <__libc_fini_array>:
    1f80:	e92d4038 	push	{r3, r4, r5, lr}
    1f84:	e59f5030 	ldr	r5, [pc, #48]	; 1fbc <__libc_fini_array+0x3c>
    1f88:	e59f4030 	ldr	r4, [pc, #48]	; 1fc0 <__libc_fini_array+0x40>
    1f8c:	e0654004 	rsb	r4, r5, r4
    1f90:	e1b04144 	asrs	r4, r4, #2
    1f94:	10855104 	addne	r5, r5, r4, lsl #2
    1f98:	0a000004 	beq	1fb0 <__libc_fini_array+0x30>
    1f9c:	e5353004 	ldr	r3, [r5, #-4]!
    1fa0:	e1a0e00f 	mov	lr, pc
    1fa4:	e12fff13 	bx	r3
    1fa8:	e2544001 	subs	r4, r4, #1
    1fac:	1afffffa 	bne	1f9c <__libc_fini_array+0x1c>
    1fb0:	eb00020c 	bl	27e8 <__libc_fini>
    1fb4:	e8bd4038 	pop	{r3, r4, r5, lr}
    1fb8:	e12fff1e 	bx	lr
    1fbc:	00002800 	.word	0x00002800
    1fc0:	00002804 	.word	0x00002804

00001fc4 <__cs3_premain>:
    1fc4:	e92d4008 	push	{r3, lr}
    1fc8:	eb00001d 	bl	2044 <__libc_init_array>
    1fcc:	e59f3030 	ldr	r3, [pc, #48]	; 2004 <__cs3_premain+0x40>
    1fd0:	e3530000 	cmp	r3, #0
    1fd4:	15930000 	ldrne	r0, [r3]
    1fd8:	01a00003 	moveq	r0, r3
    1fdc:	e59f3024 	ldr	r3, [pc, #36]	; 2008 <__cs3_premain+0x44>
    1fe0:	e3530000 	cmp	r3, #0
    1fe4:	15931000 	ldrne	r1, [r3]
    1fe8:	01a01003 	moveq	r1, r3
    1fec:	e3a02000 	mov	r2, #0
    1ff0:	ebfffc76 	bl	11d0 <main>
    1ff4:	e59f3010 	ldr	r3, [pc, #16]	; 200c <__cs3_premain+0x48>
    1ff8:	e3530000 	cmp	r3, #0
    1ffc:	1bfffe3f 	blne	1900 <exit>
    2000:	eafffffe 	b	2000 <__cs3_premain+0x3c>
	...
    200c:	00001900 	.word	0x00001900

00002010 <_exit>:
    2010:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    2014:	e3a00018 	mov	r0, #24
    2018:	e59f1004 	ldr	r1, [pc, #4]	; 2024 <_exit+0x14>
    201c:	ef123456 	svc	0x00123456
    2020:	eafffffe 	b	2020 <_exit+0x10>
    2024:	00020026 	.word	0x00020026

00002028 <__cs3_isr_interrupt>:
    2028:	eafffffe 	b	2028 <__cs3_isr_interrupt>

0000202c <__cs3_isr_undef>:
    202c:	eafffffe 	b	202c <__cs3_isr_undef>

00002030 <__cs3_isr_swi>:
    2030:	eafffffe 	b	2030 <__cs3_isr_swi>

00002034 <__cs3_isr_pabort>:
    2034:	eafffffe 	b	2034 <__cs3_isr_pabort>

00002038 <__cs3_isr_dabort>:
    2038:	eafffffe 	b	2038 <__cs3_isr_dabort>

0000203c <__cs3_isr_irq>:
    203c:	eafffffe 	b	203c <__cs3_isr_irq>

00002040 <__cs3_isr_fiq>:
    2040:	eafffffe 	b	2040 <__cs3_isr_fiq>

00002044 <__libc_init_array>:
    2044:	e92d4070 	push	{r4, r5, r6, lr}
    2048:	e59f506c 	ldr	r5, [pc, #108]	; 20bc <__libc_init_array+0x78>
    204c:	e59f606c 	ldr	r6, [pc, #108]	; 20c0 <__libc_init_array+0x7c>
    2050:	e0656006 	rsb	r6, r5, r6
    2054:	e1b06146 	asrs	r6, r6, #2
    2058:	12455004 	subne	r5, r5, #4
    205c:	13a04000 	movne	r4, #0
    2060:	0a000005 	beq	207c <__libc_init_array+0x38>
    2064:	e5b53004 	ldr	r3, [r5, #4]!
    2068:	e2844001 	add	r4, r4, #1
    206c:	e1a0e00f 	mov	lr, pc
    2070:	e12fff13 	bx	r3
    2074:	e1560004 	cmp	r6, r4
    2078:	1afffff9 	bne	2064 <__libc_init_array+0x20>
    207c:	e59f5040 	ldr	r5, [pc, #64]	; 20c4 <__libc_init_array+0x80>
    2080:	e59f6040 	ldr	r6, [pc, #64]	; 20c8 <__libc_init_array+0x84>
    2084:	e0656006 	rsb	r6, r5, r6
    2088:	eb0001ce 	bl	27c8 <_init>
    208c:	e1b06146 	asrs	r6, r6, #2
    2090:	12455004 	subne	r5, r5, #4
    2094:	13a04000 	movne	r4, #0
    2098:	0a000005 	beq	20b4 <__libc_init_array+0x70>
    209c:	e5b53004 	ldr	r3, [r5, #4]!
    20a0:	e2844001 	add	r4, r4, #1
    20a4:	e1a0e00f 	mov	lr, pc
    20a8:	e12fff13 	bx	r3
    20ac:	e1560004 	cmp	r6, r4
    20b0:	1afffff9 	bne	209c <__libc_init_array+0x58>
    20b4:	e8bd4070 	pop	{r4, r5, r6, lr}
    20b8:	e12fff1e 	bx	lr
    20bc:	000027e0 	.word	0x000027e0
    20c0:	000027e0 	.word	0x000027e0
    20c4:	000027e0 	.word	0x000027e0
    20c8:	000027e8 	.word	0x000027e8

Disassembly of section .rodata:

000020d0 <logo_bitmap-0x294>:
    20d0:	726f6353 	.word	0x726f6353
    20d4:	00203a65 	.word	0x00203a65
	...
    20ec:	01010101 	.word	0x01010101
	...
    20f8:	01000000 	.word	0x01000000
    20fc:	01010100 	.word	0x01010100
    2100:	00000001 	.word	0x00000001
    2104:	00000000 	.word	0x00000000
    2108:	01010000 	.word	0x01010000
    210c:	01010101 	.word	0x01010101
    2110:	00000001 	.word	0x00000001
    2114:	00000000 	.word	0x00000000
    2118:	01010000 	.word	0x01010000
    211c:	01010101 	.word	0x01010101
    2120:	00000001 	.word	0x00000001
    2124:	00000000 	.word	0x00000000
    2128:	01010000 	.word	0x01010000
    212c:	00000101 	.word	0x00000101
	...
    2138:	01010100 	.word	0x01010100
    213c:	01010101 	.word	0x01010101
    2140:	00000000 	.word	0x00000000
    2144:	00010000 	.word	0x00010000
    2148:	01010101 	.word	0x01010101
    214c:	01010101 	.word	0x01010101
    2150:	00000001 	.word	0x00000001
    2154:	00010100 	.word	0x00010100
    2158:	01010101 	.word	0x01010101
    215c:	00010001 	.word	0x00010001
    2160:	00000000 	.word	0x00000000
    2164:	01010101 	.word	0x01010101
    2168:	01010101 	.word	0x01010101
    216c:	00000001 	.word	0x00000001
    2170:	00000000 	.word	0x00000000
    2174:	01010100 	.word	0x01010100
    2178:	01010101 	.word	0x01010101
    217c:	00000001 	.word	0x00000001
    2180:	00000000 	.word	0x00000000
    2184:	01000000 	.word	0x01000000
    2188:	01010101 	.word	0x01010101
    218c:	00000001 	.word	0x00000001
	...
    2198:	01010101 	.word	0x01010101
	...
    21a8:	01000001 	.word	0x01000001
	...
    21b8:	01000001 	.word	0x01000001
	...
    21c8:	01000001 	.word	0x01000001
	...
    21d8:	01000001 	.word	0x01000001
	...
    21e8:	01000001 	.word	0x01000001
	...
    21f8:	01000001 	.word	0x01000001
	...
    2208:	01000101 	.word	0x01000101
    220c:	00000001 	.word	0x00000001
	...
    222c:	01010101 	.word	0x01010101
	...
    2238:	01000000 	.word	0x01000000
    223c:	01010100 	.word	0x01010100
    2240:	00000001 	.word	0x00000001
    2244:	00000000 	.word	0x00000000
    2248:	01010000 	.word	0x01010000
    224c:	01010101 	.word	0x01010101
    2250:	00000001 	.word	0x00000001
    2254:	00000000 	.word	0x00000000
    2258:	01010000 	.word	0x01010000
    225c:	01010101 	.word	0x01010101
    2260:	00000001 	.word	0x00000001
    2264:	00000000 	.word	0x00000000
    2268:	01010000 	.word	0x01010000
    226c:	00000101 	.word	0x00000101
	...
    2278:	01010101 	.word	0x01010101
    227c:	01010101 	.word	0x01010101
    2280:	00000000 	.word	0x00000000
    2284:	01000100 	.word	0x01000100
    2288:	01010101 	.word	0x01010101
    228c:	01010101 	.word	0x01010101
    2290:	00000001 	.word	0x00000001
    2294:	01000101 	.word	0x01000101
    2298:	01010101 	.word	0x01010101
    229c:	00010001 	.word	0x00010001
    22a0:	00000000 	.word	0x00000000
    22a4:	01010101 	.word	0x01010101
    22a8:	01010101 	.word	0x01010101
    22ac:	00000001 	.word	0x00000001
    22b0:	00000000 	.word	0x00000000
    22b4:	01010100 	.word	0x01010100
    22b8:	01010101 	.word	0x01010101
    22bc:	00000001 	.word	0x00000001
    22c0:	00000000 	.word	0x00000000
    22c4:	01000000 	.word	0x01000000
    22c8:	01010101 	.word	0x01010101
	...
    22d8:	00010101 	.word	0x00010101
	...
    22e8:	00000001 	.word	0x00000001
	...
    22f8:	00000100 	.word	0x00000100
	...
    2308:	00010000 	.word	0x00010000
	...
    2318:	00010000 	.word	0x00010000
	...
    2328:	00010000 	.word	0x00010000
	...
    2338:	00010000 	.word	0x00010000
	...
    2348:	00010100 	.word	0x00010100
    234c:	00000001 	.word	0x00000001
	...

00002364 <logo_bitmap>:
	...
    2434:	01010101 01010101 00010101 00000000     ................
	...
    2454:	01010101 01010101 01010101 00000000     ................
	...
    2470:	01000000 01000101 01010101 01010101     ................
	...
    2490:	01000000 01000101 01010101 01010101     ................
	...
    24b0:	01000000 01010101 01010101 01010101     ................
	...
    24d0:	01000000 01010101 01010101 01010101     ................
	...
    24f0:	01000000 01010101 01010101 01010101     ................
	...
    2510:	01000000 01010101 00000001 00000000     ................
	...
    2530:	01000000 01010101 00000001 00000000     ................
	...
    2550:	01000000 01010101 01010101 00000001     ................
	...
    2570:	01000000 01010101 00000000 00000000     ................
	...
    2590:	01010000 01010101 00000000 00000000     ................
	...
    25b0:	01010000 01010101 00000000 00000000     ................
	...
    25d0:	01010101 01010101 00000000 00000000     ................
	...
    25ec:	01010000 01010101 01010101 00000101     ................
	...
    2608:	00000100 01010100 01010101 01010101     ................
    2618:	00000100 00000000 00000000 00000000     ................
    2628:	01010000 01010101 01010101 01010101     ................
	...
    2648:	01000000 01010101 01010101 01010101     ................
	...
    266c:	01010101 01010101 01010101 00000000     ................
	...
    268c:	01010100 01010101 00000101 00000000     ................
	...
    26ac:	01000000 01010101 00000101 00000000     ................
	...
    26d0:	01010000 00000001 00000000 00000000     ................
	...
    2764:	20482054 20202045 20492044 204f204e     T H E   D I N O 
    2774:	20412053 20522055 20472020 204d2041     S A U R   G A M 
    2784:	00000045 41204720 45204d20 4f202020     E... G A M E   O
    2794:	45205620 21205220 00000000 73657250      V E R !....Pres
    27a4:	6e6f6973 454b2065 70203159 20617261     sione KEY1 para 
    27b4:	6e696572 61696369 00000072              reiniciar...

000027c0 <_global_impure_ptr>:
    27c0:	00002848 00000043                       H(..C...

000027c8 <_init>:
    27c8:	e1a0c00d 	mov	r12, sp
    27cc:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    27d0:	e24cb004 	sub	r11, r12, #4
    27d4:	e24bd028 	sub	sp, r11, #40	; 0x28
    27d8:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    27dc:	e12fff1e 	bx	lr

000027e0 <__init_array_start>:
    27e0:	00001f5c 	.word	0x00001f5c

000027e4 <__frame_dummy_init_array_entry>:
    27e4:	00000208                                ....

000027e8 <__libc_fini>:
    27e8:	e1a0c00d 	mov	r12, sp
    27ec:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    27f0:	e24cb004 	sub	r11, r12, #4
    27f4:	e24bd028 	sub	sp, r11, #40	; 0x28
    27f8:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    27fc:	e12fff1e 	bx	lr

00002800 <__fini_array_start>:
    2800:	000001c4 	.word	0x000001c4

00002804 <__cs3_regions>:
	...
    2810:	00002c78 	.word	0x00002c78
    2814:	00000048 	.word	0x00000048
